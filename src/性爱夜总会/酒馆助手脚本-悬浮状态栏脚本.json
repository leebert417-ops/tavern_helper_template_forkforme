{
  "type": "script",
  "enabled": true,
  "name": "悬浮状态栏脚本",
  "id": "8bb6240c-e3ad-4729-ba07-4233af3b24b3",
  "content": "// ==================== 掌上公寓 - SillyTavern 插件版 ====================\n// 完整功能的公寓管理系统，带可拖动按钮\n// 版本：动态扩展版\n\nconsole.log('🏢 加载掌上公寓插件...');\n\n// ==================== 样式定义 ====================\nconst styles = `\n<style id=\"apartment-plugin-styles\">\n/* ==================== 全局样式 ==================== */\n* { \n    margin: 0; \n    padding: 0; \n    box-sizing: border-box;\n}\n\n/* 支持刘海屏等安全区域 - 仅在小屏幕应用 */\n@media (max-width: 768px) {\n    @supports (padding: max(0px)) {\n        .apartment-main-panel {\n            padding-top: max(0px, env(safe-area-inset-top)) !important;\n            padding-bottom: max(0px, env(safe-area-inset-bottom)) !important;\n            padding-left: max(0px, env(safe-area-inset-left)) !important;\n            padding-right: max(0px, env(safe-area-inset-right)) !important;\n        }\n    }\n}\n\n.no-select { \n    user-select: none; \n    -webkit-user-select: none; \n    -moz-user-select: none; \n    -ms-user-select: none; \n}\n\n/* 移除所有按钮和可交互元素的焦点框 */\nbutton:focus,\nbutton:active,\n.actionable:focus,\n.actionable:active,\n.room-card:focus,\n.room-card:active,\n.dock-button:focus,\n.dock-button:active,\n.zoom-btn:focus,\n.zoom-btn:active,\n.confirm-btn:focus,\n.confirm-btn:active,\n.add-floor-btn:focus,\n.add-floor-btn:active,\n.add-room-btn:focus,\n.add-room-btn:active {\n    outline: none !important;\n    -webkit-tap-highlight-color: transparent !important;\n}\n\n/* 移除移动端触摸高亮 */\n* {\n    -webkit-tap-highlight-color: transparent;\n    -webkit-touch-callout: none;\n}\n\n/* 性能优化 - 仅对拖动元素使用 */\n#apartment-canvas {\n    -webkit-transform: translateZ(0);\n    transform: translateZ(0);\n}\n\n/* 拖动时禁用文本选择 */\n.canvas-viewport {\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n\n:root { \n    --theme-phone-bg: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%); \n    --theme-phone-bg-solid: #f8f9fa;\n    --theme-text-color: #2c3e50; \n    --theme-border-color: #dee2e6; \n    --theme-container-bg: #ffffff; \n    --theme-subtitle-color: #6c757d; \n    --theme-header-bg: linear-gradient(135deg, #6c8cdc 0%, #8b7bb8 100%);\n    --theme-dock-bg: rgba(255, 255, 255, 0.95); \n    --theme-modal-btn-bg: #f8f9fa; \n    --theme-input-bg: #ffffff;\n    --theme-input-text: #2c3e50;\n    --color-fixed: #fff9e6; \n    --color-bedroom-empty: #f8e8e8;\n    --color-bedroom-occupied: #ffd4d4;\n    --color-functional: #e6f2ff; \n    --color-empty: #f0f0f0; \n    --color-outdoor: #e8f5e9; \n    --color-pending: #fff8e1;\n    --color-danger: #ffe0e0; \n    --your-room-bg: #e1f5fe; \n    --progress-bar-bg: #e9ecef; \n    --progress-bar-favor-fill: #ff8a80; \n    --progress-bar-lust-fill: #ff80ab; \n    --color-add-room: #e8f5e9; \n}\n\n.dark-theme { \n    --theme-phone-bg: linear-gradient(180deg, #1e2530 0%, #2a3441 100%); \n    --theme-phone-bg-solid: #1e2530;\n    --theme-text-color: #e8eaed; \n    --theme-border-color: #4a5568; \n    --theme-container-bg: #2a3441; \n    --theme-subtitle-color: #9ca3af;\n    --theme-header-bg: linear-gradient(135deg, #4a5568 0%, #2d3748 100%); \n    --theme-dock-bg: rgba(42, 52, 65, 0.95); \n    --theme-modal-btn-bg: #374151; \n    --theme-input-bg: #1e2530;\n    --theme-input-text: #e8eaed;\n    --color-fixed: #4a4332; \n    --color-bedroom-empty: #3d3338;\n    --color-bedroom-occupied: #4a3333;\n    --color-functional: #2d3d52; \n    --color-empty: #363d47; \n    --color-outdoor: #354237;\n    --color-pending: #4a4636; \n    --color-danger: #5a3333; \n    --your-room-bg: #2d4550; \n    --progress-bar-bg: #374151; \n    --progress-bar-favor-fill: #ef4444; \n    --progress-bar-lust-fill: #ec4899; \n    --color-add-room: #354237; \n}\n\n/* ==================== 拖动按钮 ==================== */\n.apartment-toggle-btn {\n    position: fixed !important;\n    top: 100px;\n    left: 20px;\n    width: 64px;\n    height: 64px;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: grab;\n    z-index: 10000 !important;\n    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);\n    user-select: none;\n    -webkit-user-select: none;\n    touch-action: none;\n    font-size: 28px;\n    border: 3px solid rgba(255, 255, 255, 0.3);\n}\n\n.apartment-toggle-btn.dragging {\n    cursor: grabbing !important;\n    opacity: 0.9;\n    z-index: 10001 !important;\n}\n\n/* 移动端优化 */\n@media (max-width: 768px) {\n    .apartment-toggle-btn {\n        width: 56px;\n        height: 56px;\n        font-size: 24px;\n        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);\n    }\n}\n\n@media (max-width: 480px) {\n    .apartment-toggle-btn {\n        /* 🔧 确保按钮在小屏幕下也能正常工作 */\n        z-index: 10002 !important;\n        pointer-events: auto !important;\n    }\n}\n\n/* ==================== 主界面容器 ==================== */\n.apartment-main-panel {\n    position: fixed !important;\n    top: 50vh !important;\n    left: 50vw !important;\n    transform: translate(-50%, -50%) !important;\n    width: 90vw !important;\n    max-width: 900px !important;\n    height: 85vh !important;\n    max-height: 650px !important;\n    min-height: 400px !important;\n    min-width: 320px !important;\n    background: var(--theme-phone-bg-solid);\n    border: 12px solid transparent;\n    background-clip: padding-box;\n    border-radius: 32px;\n    box-shadow: \n        0 0 0 1px rgba(0, 0, 0, 0.1),\n        0 24px 64px rgba(0, 0, 0, 0.4),\n        0 0 80px rgba(102, 126, 234, 0.2);\n    z-index: 999 !important;\n    display: none;\n    flex-direction: column;\n    overflow: hidden;\n    color: var(--theme-text-color);\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif;\n    backdrop-filter: blur(20px);\n}\n\n.apartment-main-panel::before {\n    content: '';\n    position: absolute;\n    inset: 0;\n    background: var(--theme-phone-bg);\n    border-radius: 20px;\n    z-index: -1;\n}\n\n.apartment-main-panel.active {\n    display: flex;\n}\n\n/* ==================== 移动端响应式 ==================== */\n/* 481px - 768px：平板大小 */\n@media (min-width: 481px) and (max-width: 768px) {\n    .apartment-main-panel {\n        top: 8vh !important;\n        left: 5vw !important;\n        transform: none !important;\n        width: 90vw !important;\n        height: 84vh !important;\n        max-width: none !important;\n        max-height: none !important;\n        min-width: 0 !important;\n        min-height: 0 !important;\n        border-radius: 20px !important;\n    }\n}\n\n/* 480px以下：手机大小 */\n@media (max-width: 480px) {\n    .apartment-main-panel {\n        position: fixed !important;\n        top: 3vh !important;\n        left: 2.5vw !important;\n        transform: none !important;\n        width: 95vw !important;\n        /* 🔧 简化高度计算，确保稳定显示 */\n        height: 88vh !important;\n        max-width: none !important;\n        max-height: 92vh !important;\n        min-width: 0 !important;\n        min-height: 0 !important;\n        border-radius: 16px !important;\n        z-index: 999 !important;\n    }\n    \n    /* 🔧 只在active时设置flex，避免覆盖显示/隐藏逻辑 */\n    .apartment-main-panel.active {\n        display: flex !important;\n        flex-direction: column !important;\n    }\n    \n    .apartment-main-panel::before {\n        border-radius: 12px !important;\n    }\n}\n\n/* ==================== 头部 ==================== */\n.mobile-header { \n    flex-shrink: 0; \n    padding: 16px 20px;\n    background: var(--theme-header-bg);\n    border-bottom: none;\n    display: flex; \n    justify-content: space-between; \n    align-items: center; \n    font-size: 0.9em; \n    position: relative; \n    z-index: 20;\n    box-shadow: 0 2px 12px rgba(0, 0, 0, 0.08);\n    color: white;\n    min-height: 56px;\n}\n\n.mobile-header > div:first-child {\n    font-weight: 600;\n    letter-spacing: 0.3px;\n}\n\n#mode-display { \n    font-weight: 700; \n    padding: 6px 14px; \n    border-radius: 20px;\n    font-size: 0.9em;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n}\n\n#mode-display.observation-mode { \n    background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);\n    color: #2c3e50; \n}\n\n#mode-display.build-mode { \n    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n    color: white;\n}\n\n@media (max-width: 768px) {\n    .mobile-header {\n        padding: 12px 16px;\n        font-size: 0.85em;\n        min-height: 52px;\n    }\n    \n    #mode-display {\n        padding: 5px 12px;\n        font-size: 0.85em;\n    }\n}\n\n@media (max-width: 480px) {\n    .mobile-header {\n        padding: 10px 12px;\n        font-size: 0.75em;\n        min-height: 48px;\n        flex-shrink: 0 !important;\n    }\n    \n    .mobile-header > div:first-child {\n        font-size: 0.95em;\n    }\n    \n    #mode-display {\n        padding: 4px 10px;\n        font-size: 0.8em;\n    }\n    \n    /* 🔧 确保画布视口能正确flex */\n    .canvas-viewport {\n        flex: 1 1 auto !important;\n        min-height: 0 !important;\n        overflow: auto !important;\n    }\n}\n\n/* ==================== 画布视口 ==================== */\n.canvas-viewport { \n    flex-grow: 1; \n    position: relative; \n    overflow: auto; \n    min-height: 0; \n    border-radius: 20px; \n    cursor: grab;\n}\n\n.canvas-viewport:active { \n    cursor: grabbing; \n}\n\n/* 确保滚动条样式美观 */\n.canvas-viewport::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n}\n\n.canvas-viewport::-webkit-scrollbar-track {\n    background: rgba(0, 0, 0, 0.1);\n    border-radius: 4px;\n}\n\n.canvas-viewport::-webkit-scrollbar-thumb {\n    background: rgba(102, 126, 234, 0.5);\n    border-radius: 4px;\n}\n\n.canvas-viewport::-webkit-scrollbar-thumb:hover {\n    background: rgba(102, 126, 234, 0.7);\n}\n\n#apartment-canvas { \n    position: absolute; \n    left: 50%; \n    top: 50%; \n    transform: translate(-50%, -50%) scale(1); \n    transform-origin: center center;\n    display: flex; \n    flex-direction: column; \n    align-items: stretch; \n    gap: 10px;\n    min-width: 1515px;\n}\n\n/* 缩放时添加平滑过渡 */\n#apartment-canvas.zooming {\n    transition: transform 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n}\n\n/* ==================== 底部工具栏 ==================== */\n.mobile-footer { \n    flex-shrink: 0; \n    padding: 12px 8px; \n    background: var(--theme-dock-bg);\n    backdrop-filter: blur(20px) saturate(180%); \n    border-top: 1px solid rgba(0, 0, 0, 0.05);\n    display: flex; \n    justify-content: space-around; \n    align-items: center; \n    z-index: 20; \n    overflow-x: auto; \n    overflow-y: hidden; \n    gap: 4px;\n    box-shadow: 0 -2px 12px rgba(0, 0, 0, 0.08);\n    min-height: 60px;\n    /* 🔧 移动端底部安全区域适配（防止被浏览器工具栏遮挡） */\n    padding-bottom: max(12px, env(safe-area-inset-bottom, 12px));\n}\n\n.dock-button { \n    display: flex; \n    flex-direction: column; \n    align-items: center; \n    gap: 4px; \n    cursor: pointer; \n    background: transparent; \n    border: none;\n    color: var(--theme-subtitle-color); \n    font-size: 11px; \n    font-family: inherit; \n    min-width: 60px; \n    flex: 1; \n    max-width: 85px; \n    padding: 8px 4px;\n    border-radius: 12px;\n    position: relative;\n}\n\n@media (max-width: 768px) {\n    .dock-button { \n        font-size: 10px; \n        min-width: 52px; \n        padding: 6px 2px; \n    }\n}\n\n@media (max-width: 480px) {\n    .mobile-footer {\n        padding: 8px 4px;\n        min-height: 56px;\n        flex-shrink: 0 !important;\n        /* 🔧 手机端增加更多底部安全间距（防止被工具栏遮挡） */\n        padding-bottom: max(16px, calc(env(safe-area-inset-bottom, 0px) + 8px));\n    }\n    \n    .dock-button { \n        font-size: 9px; \n        min-width: 44px; \n        padding: 5px 1px;\n        gap: 2px;\n    }\n    .dock-button-icon { \n        font-size: 18px !important; \n    }\n    .dock-button span:not(.dock-button-icon) { \n        font-size: 8px;\n        line-height: 1.2;\n    }\n}\n\n.dock-button:disabled { \n    color: #999 !important;\n    cursor: not-allowed;\n    opacity: 0.5; \n} \n\n.dock-button-icon { \n    font-size: 26px;\n}\n\n.dock-button.active {\n    color: #667eea;\n    background: rgba(102, 126, 234, 0.12);\n}\n\n.dock-button.active .dock-button-icon { \n    color: #667eea;\n}\n\n/* ==================== 楼层和房间 ==================== */\n.above-ground-wrapper { \n    display: grid; \n    grid-template-columns: 200px 1fr 200px; \n    align-items: end; \n    gap: 20px;\n    padding: 20px 20px 0 20px; \n}\n\n.basement-wrapper { \n    display: grid; \n    grid-template-columns: 200px 1fr 200px; \n    gap: 20px;\n    padding: 0 20px 20px 20px; \n}\n\n.indoor-levels { \n    display: flex; \n    flex-direction: column; \n    gap: 20px;\n}\n\n.level { \n    background-color: var(--theme-container-bg); \n    border-radius: 12px; \n    box-shadow: 0 4px 12px rgba(0,0,0,0.06); \n    padding: 15px;\n    border: 1px solid var(--theme-border-color); \n    display: flex; \n    flex-direction: column; \n    width: 1275px; \n    box-sizing: border-box;\n}\n\n.level-title { \n    font-size: 1.2em; \n    font-weight: 600; \n    margin: 0 0 15px 5px;\n    color: var(--theme-text-color); \n    flex-shrink: 0; \n}\n\n.room-grid { \n    display: flex; \n    gap: 10px; \n    flex: 1; \n    align-items: stretch; \n}\n\n.room-card { \n    flex-shrink: 0;\n    flex-basis: 0; \n    border-radius: 12px; \n    padding: 16px 12px; \n    min-height: 80px;\n    min-width: 80px; \n    display: flex; \n    flex-direction: column; \n    justify-content: center; \n    align-items: center; \n    text-align: center;\n    font-weight: 600; \n    font-size: 0.9em; \n    border: 2px solid rgba(255, 255, 255, 0.3); \n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);\n    position: relative;\n    overflow: hidden;\n}\n\n/* 移除不必要的::before伪元素以提升性能 */\n\n.size-2 { flex-grow: 2; }\n.size-3 { flex-grow: 3; }\n.size-6 { flex-grow: 6; }\n\n.room-card.actionable { \n    cursor: pointer;\n}\n\n@media (max-width: 768px) {\n    .room-card {\n        padding: 12px 8px;\n        min-height: 70px;\n        min-width: 70px;\n        font-size: 0.85em;\n    }\n}\n\n.placeholder { \n    visibility: hidden; \n}\n\n.fixed-room { \n    background: var(--color-fixed);\n}\n\n.fixed-room .room-name::before {\n    content: '🏛️ ';\n}\n\n.outdoor-room { \n    background: var(--color-outdoor); \n}\n\n.outdoor-room .room-name::before {\n    content: '🌳 ';\n}\n\n.empty-room { \n    background: var(--color-empty);\n    position: relative;\n}\n\n.empty-room::after {\n    content: '🏚️';\n    display: block;\n    font-size: 1.8em;\n    opacity: 0.35;\n    margin-top: 4px;\n}\n\n.empty-room .room-name::after {\n    content: ' (空置)';\n    font-size: 0.85em;\n    opacity: 0.7;\n    font-weight: 400;\n}\n\n.bedroom-room { \n    background: var(--color-bedroom-empty);\n}\n\n.bedroom-room .room-name::before {\n    content: '🛏️ ';\n}\n\n/* 已住人的卧室使用更深的颜色 */\n.bedroom-room[data-occupant]:not([data-occupant=\"\"]):not([data-occupant=\"未知\"]) {\n    background: var(--color-bedroom-occupied);\n}\n\n.your-room { \n    background: var(--your-room-bg); \n}\n\n.your-room .room-name::before {\n    content: '';\n}\n\n.functional-room { \n    background: var(--color-functional); \n}\n\n.functional-room .room-name::before {\n    content: '🎨 ';\n}\n\n.pending-decoration { \n    background-color: var(--color-pending); \n    border-style: dashed;\n}\n\n.pending-eviction { \n    background-color: var(--color-danger); \n    border-style: dotted; \n    color: #721c24; \n}\n\n.pending-demolition { \n    background-color: var(--color-danger); \n    border-style: dashed;\n    color: #721c24; \n}\n\n.room-name { \n    font-weight: bold; \n}\n\n.room-occupant { \n    font-size: 0.8em; \n    color: var(--theme-subtitle-color); \n    margin-top: 5px; \n}\n\n.add-room-card { \n    background: var(--color-add-room); \n    border: 2px dashed #96c47c; \n    font-size: 2em; \n    color: #2d5016;\n}\n\n.add-floor-btn { \n    width: 100%; \n    min-width: 1515px; \n    padding: 14px 16px; \n    background: var(--color-add-room); \n    border: 2px dashed #96c47c; \n    border-radius: 12px; \n    cursor: pointer; \n    font-weight: 700; \n    color: #2d5016;\n    font-size: 1em; \n    display: block; \n    box-sizing: border-box;\n}\n\n.add-room-btn { \n    width: 100%; \n    padding: 12px 16px; \n    background: var(--color-add-room); \n    border: 2px dashed #96c47c; \n    border-radius: 12px; \n    cursor: pointer; \n    font-weight: 700; \n    margin: 12px 0; \n    color: #2d5016;\n    font-size: 0.95em; \n    display: block; \n    box-sizing: border-box;\n}\n\n@media (max-width: 768px) {\n    .add-floor-btn,\n    .add-room-btn {\n        padding: 10px 12px;\n        font-size: 0.9em;\n    }\n}\n\n.slot-indicator { \n    font-size: 0.7em; \n    color: var(--theme-subtitle-color); \n    margin-top: 3px; \n}\n\n.outdoor-room { \n    background-color: var(--color-outdoor); \n    min-height: 100%; \n}\n\n.floor-wrapper { \n    display: flex; \n    align-items: stretch; \n    width: 100%; \n    min-width: 1515px; \n}\n\n.floor-outdoor-left { \n    width: 120px; \n    flex-shrink: 0; \n    display: flex; \n    flex-direction: column; \n}\n\n.floor-outdoor-right { \n    width: 120px; \n    flex-shrink: 0; \n    display: flex; \n    flex-direction: column; \n}\n\n.floor-main { \n    flex: 1; \n    display: flex; \n    justify-content: center; \n    align-items: stretch; \n}\n\n.outdoor-card { \n    width: 100%; \n    flex: 1; \n    display: flex; \n    flex-direction: column; \n    align-items: center; \n    justify-content: center; \n    text-align: center; \n    padding: 10px; \n    font-size: 0.85em; \n}\n\n/* ==================== 浮动UI ==================== */\n.floating-ui { \n    position: absolute; \n    bottom: 80px; \n    right: 20px; \n    z-index: 10; \n    display: flex; \n    flex-direction: column; \n    align-items: flex-end;\n    gap: 10px; \n}\n\n@media (max-width: 480px) {\n    .floating-ui {\n        /* 🔧 在底部工具栏上方留出安全距离 */\n        bottom: max(70px, calc(env(safe-area-inset-bottom, 0px) + 70px));\n        right: 10px;\n    }\n}\n\n.zoom-controls { \n    display: flex; \n    flex-direction: column; \n    gap: 5px;\n}\n\n.zoom-btn, .confirm-btn { \n    width: 48px; \n    height: 48px; \n    border-radius: 50%; \n    border: none; \n    background: rgba(102, 126, 234, 0.9);\n    color: white; \n    font-size: 24px; \n    font-weight: 700; \n    cursor: pointer; \n    line-height: 1;\n    box-shadow: 0 2px 10px rgba(102, 126, 234, 0.3);\n    backdrop-filter: blur(10px);\n}\n\n.confirm-btn { \n    width: auto;\n    padding: 0 24px; \n    border-radius: 24px; \n    font-size: 16px;\n    background: rgba(86, 171, 47, 0.9);\n}\n\n@media (max-width: 768px) {\n    .zoom-btn, .confirm-btn {\n        width: 44px;\n        height: 44px;\n        font-size: 20px;\n    }\n    \n    .confirm-btn {\n        padding: 0 20px;\n        font-size: 15px;\n    }\n}\n\n/* ==================== 模态框 ==================== */\n.modal-overlay { \n    position: fixed !important; \n    top: 0 !important;\n    left: 0 !important; \n    width: 100vw !important; \n    height: 100vh !important; \n    background: rgba(0, 0, 0, 0.5);\n    backdrop-filter: blur(4px);\n    display: flex; \n    justify-content: center; \n    align-items: center; \n    z-index: 1000 !important;\n    overflow-y: auto;\n    padding: 20px 0;\n}\n\n.modal-content { \n    background: var(--theme-container-bg); \n    color: var(--theme-text-color); \n    padding: 28px; \n    border-radius: 20px; \n    width: 90%; \n    max-width: 420px;\n    max-height: 80vh;\n    overflow-y: auto;\n    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n}\n\n.modal-title { \n    margin: 0 0 12px 0;\n    font-size: 1.4em;\n    font-weight: 700;\n}\n\n.modal-subtitle { \n    color: var(--theme-subtitle-color); \n    margin: 0 0 24px 0; \n    font-size: 0.95em;\n    line-height: 1.5;\n}\n\n.modal-choices button, .modal-confirm-btn { \n    display: block;\n    width: 100%; \n    padding: 14px 16px; \n    margin-bottom: 12px; \n    font-size: 1em; \n    font-weight: 600;\n    border-radius: 12px; \n    border: 2px solid transparent; \n    cursor: pointer; \n    background: #667eea;\n    color: white;\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.25);\n}\n\n.modal-choices button:disabled { \n    background: #ccc; \n    color: #666; \n    cursor: not-allowed;\n    box-shadow: none;\n}\n\n@media (max-width: 768px) {\n    .modal-overlay {\n        padding: 10px;\n    }\n    \n    .modal-content {\n        padding: 20px;\n        border-radius: 16px;\n        width: 92%;\n        max-height: 85vh;\n    }\n    \n    .modal-title {\n        font-size: 1.2em;\n    }\n    \n    .modal-subtitle {\n        font-size: 0.9em;\n        margin-bottom: 16px;\n    }\n    \n    .modal-choices button, .modal-confirm-btn {\n        padding: 12px 14px;\n        font-size: 0.95em;\n    }\n}\n\n@media (max-width: 480px) {\n    .modal-overlay {\n        padding: 5px;\n    }\n    \n    .modal-content {\n        padding: 16px;\n        width: 95%;\n        max-height: 90vh;\n        border-radius: 12px;\n    }\n    \n    .modal-title {\n        font-size: 1.1em;\n    }\n    \n    .modal-subtitle {\n        font-size: 0.85em;\n    }\n    \n    .modal-choices button, .modal-confirm-btn {\n        padding: 10px 12px;\n        font-size: 0.9em;\n        margin-bottom: 10px;\n    }\n}\n\n.modal-functional-input { \n    margin-top: 16px; \n}\n\n.modal-functional-input label {\n    display: block;\n    margin-bottom: 8px;\n    font-weight: 600;\n    color: var(--theme-text-color);\n}\n\n.modal-functional-input input, \n.modal-functional-input select { \n    width: 100%; \n    padding: 12px 16px;\n    box-sizing: border-box; \n    border: 2px solid var(--theme-border-color); \n    border-radius: 12px; \n    margin-bottom: 12px; \n    background-color: var(--theme-input-bg) !important; \n    color: var(--theme-input-text) !important;\n    font-size: 1em;\n}\n\n/* 特别强制招募输入框的样式 */\n#recruitment-keywords {\n    background-color: var(--theme-input-bg) !important;\n    color: var(--theme-input-text) !important;\n}\n\n/* 白天模式强制白色背景 */\n:root #recruitment-keywords,\n:root .modal-functional-input input,\n:root .modal-functional-input select {\n    background-color: #ffffff !important;\n    color: #2c3e50 !important;\n}\n\n:root .modal-functional-input input::placeholder {\n    color: #6c757d !important;\n    opacity: 0.7;\n}\n\n/* 夜晚模式强制深色背景 */\n.dark-theme #recruitment-keywords,\n.dark-theme .modal-functional-input input,\n.dark-theme .modal-functional-input select {\n    background-color: #2a3441 !important;\n    color: #e8eaed !important;\n}\n\n.dark-theme .modal-functional-input input::placeholder {\n    color: #9ca3af !important;\n    opacity: 0.7;\n}\n\n/* WebKit浏览器兼容 */\ninput:-webkit-autofill,\ninput:-webkit-autofill:hover,\ninput:-webkit-autofill:focus {\n    -webkit-text-fill-color: var(--theme-input-text) !important;\n    -webkit-box-shadow: 0 0 0 1000px var(--theme-input-bg) inset !important;\n}\n\n.modal-functional-input input:focus,\n.modal-functional-input select:focus {\n    outline: none;\n    border-color: #667eea;\n}\n\n.hidden { \n    display: none !important; \n}\n\n.danger-btn { \n    background: #eb3b5a !important;\n    color: white !important;\n    box-shadow: 0 2px 8px rgba(235, 59, 90, 0.25);\n}\n\n/* ==================== 事件模态框 ==================== */\n.event-modal { \n    position: absolute; \n    bottom: 0; \n    left: 0; \n    right: 0; \n    height: 75%; \n    background: var(--theme-container-bg);\n    border-top: none;\n    border-radius: 24px 24px 0 0; \n    z-index: 100; \n    transform: translateY(100%); \n    display: flex;\n    flex-direction: column;\n    box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.15);\n    transition: transform 0.3s ease-out;\n}\n\n.event-modal.visible { \n    transform: translateY(0); \n}\n\n.event-header { \n    padding: 20px; \n    text-align: center;\n    font-weight: 700; \n    font-size: 1.2em;\n    border-bottom: 2px solid var(--theme-border-color); \n    flex-shrink: 0;\n    background: rgba(102, 126, 234, 0.05);\n    cursor: pointer;\n}\n\n.event-body { \n    padding: 20px; \n    overflow-y: auto; \n    flex-grow: 1;\n}\n\n.event-section-title { \n    font-size: 1.2em; \n    font-weight: 700; \n    margin-bottom: 14px; \n    border-left: 5px solid #667eea; \n    padding-left: 12px;\n    color: var(--theme-text-color);\n}\n\n.event-buttons-grid { \n    display: grid; \n    grid-template-columns: repeat(auto-fit, minmax(130px, 1fr)); \n    gap: 12px;\n}\n\n@media (max-width: 768px) {\n    .event-buttons-grid {\n        grid-template-columns: repeat(auto-fit, minmax(110px, 1fr));\n        gap: 10px;\n    }\n}\n\n@media (max-width: 480px) {\n    .event-buttons-grid {\n        grid-template-columns: repeat(2, 1fr);\n    }\n}\n\n.event-button { \n    padding: 16px 12px; \n    font-size: 0.95em; \n    font-weight: 600; \n    border-radius: 12px; \n    border: 2px solid var(--theme-border-color);\n    cursor: pointer; \n    background: var(--theme-modal-btn-bg);\n    color: var(--theme-text-color);\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.06);\n}\n\n.event-button.random { \n    background: #667eea;\n    color: white;\n    border-color: #667eea;\n    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.25);\n}\n\n/* ==================== 信息模态框美化 ==================== */\n#info-modal .modal-content {\n    padding: 0;\n    overflow: hidden;\n    max-height: 75vh;\n    display: flex;\n    flex-direction: column;\n    position: relative;\n}\n\n#info-modal-header {\n    padding: 20px 25px;\n    padding-right: 60px; /* 为关闭按钮留空间 */\n    border-bottom: 1px solid var(--theme-border-color);\n    flex-shrink: 0;\n    position: relative;\n}\n\n/* 🔧 添加关闭按钮样式 */\n.modal-close-btn {\n    position: absolute;\n    top: 15px;\n    right: 15px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: none;\n    background: rgba(0, 0, 0, 0.1);\n    color: var(--theme-text-color);\n    font-size: 24px;\n    line-height: 1;\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    transition: all 0.2s;\n    z-index: 10;\n}\n\n.modal-close-btn:hover {\n    background: rgba(235, 59, 90, 0.15);\n    color: #eb3b5a;\n    transform: scale(1.1);\n}\n\n.modal-close-btn:active {\n    transform: scale(0.95);\n}\n\n#info-modal-details {\n    padding: 20px 25px;\n    overflow-y: auto;\n    -webkit-overflow-scrolling: touch; /* iOS平滑滚动 */\n    flex: 1;\n    max-height: calc(75vh - 120px);\n}\n\n/* 移动端优化 */\n@media (max-width: 768px) {\n    #info-modal .modal-content {\n        max-height: 80vh;\n    }\n    \n    #info-modal-header {\n        padding: 16px 20px;\n        padding-right: 55px;\n    }\n    \n    #info-modal-details {\n        padding: 16px 20px;\n        max-height: calc(80vh - 100px);\n    }\n}\n\n@media (max-width: 480px) {\n    #info-modal .modal-content {\n        max-height: 70vh; /* 🔧 减小高度，更方便操作 */\n        width: 92%;\n    }\n    \n    #info-modal-header {\n        padding: 14px 16px;\n        padding-right: 50px;\n    }\n    \n    #info-modal-details {\n        padding: 14px 16px;\n        max-height: calc(70vh - 90px);\n    }\n    \n    .modal-close-btn {\n        width: 32px;\n        height: 32px;\n        font-size: 20px;\n        top: 12px;\n        right: 12px;\n    }\n}\n\n#info-modal-details ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n#info-modal-details li {\n    padding: 8px 0;\n    border-bottom: 1px solid var(--theme-border-color);\n    font-size: 0.95em;\n}\n\n#info-modal-details li:last-child {\n    border-bottom: none;\n}\n\n#info-modal-details li strong {\n    color: var(--theme-subtitle-color);\n    margin-right: 10px;\n    display: inline-block;\n    width: 50px;\n}\n\n#info-modal-details p strong {\n    font-weight: 600;\n    margin-right: 5px;\n}\n\n.progress-bar-container {\n    display: flex;\n    align-items: center;\n    gap: 12px;\n    margin: 8px 0;\n}\n\n.progress-bar {\n    flex-grow: 1;\n    height: 14px;\n    background-color: var(--progress-bar-bg);\n    border-radius: 10px;\n    overflow: hidden;\n    position: relative;\n    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.progress-bar-fill {\n    height: 100%;\n    width: 0%;\n    border-radius: 10px;\n    position: relative;\n    overflow: hidden;\n}\n\n.progress-bar-favor { \n    background: var(--progress-bar-favor-fill); \n}\n\n.progress-bar-lust { \n    background: var(--progress-bar-lust-fill); \n}\n\n.progress-value {\n    font-weight: 700;\n    font-size: 0.95em;\n    min-width: 35px;\n    text-align: right;\n    color: var(--theme-text-color);\n}\n\n/* ==================== 历史、成就、关系模态框优化 ==================== */\n#history-modal .modal-content,\n#achievement-modal .modal-content,\n#relation-modal .modal-content {\n    max-height: 70vh !important;\n    overflow: hidden !important;\n    display: flex !important;\n    flex-direction: column !important;\n    position: relative !important;\n}\n\n/* 🔧 标题区域样式 */\n#history-modal .modal-title,\n#achievement-modal .modal-title,\n#relation-modal .modal-title {\n    padding-right: 50px; /* 为关闭按钮留空间 */\n    flex-shrink: 0;\n}\n\n/* 🔧 内容区域可滚动 */\n#history-content,\n#achievement-content,\n#relation-content {\n    overflow-y: auto !important;\n    -webkit-overflow-scrolling: touch;\n    flex: 1 !important;\n    padding: 15px !important;\n    max-height: calc(70vh - 80px) !important;\n}\n\n@media (max-width: 768px) {\n    #history-modal .modal-content,\n    #achievement-modal .modal-content,\n    #relation-modal .modal-content {\n        max-height: 75vh !important;\n        width: 95% !important;\n    }\n    \n    #history-content,\n    #achievement-content,\n    #relation-content {\n        padding: 12px !important;\n        font-size: 0.95em;\n        max-height: calc(75vh - 70px) !important;\n    }\n}\n\n@media (max-width: 480px) {\n    #history-modal .modal-content,\n    #achievement-modal .modal-content,\n    #relation-modal .modal-content {\n        max-height: 70vh !important;\n        width: 92% !important;\n    }\n    \n    #history-content,\n    #achievement-content,\n    #relation-content {\n        padding: 10px !important;\n        font-size: 0.9em;\n        max-height: calc(70vh - 65px) !important;\n    }\n}\n\n/* ==================== 格子选择器 ==================== */\n.grid-cell {\n    padding: 16px 8px;\n    border: 2px solid var(--theme-border-color);\n    border-radius: 10px;\n    text-align: center;\n    cursor: pointer;\n    user-select: none;\n    background: var(--theme-modal-btn-bg);\n    font-weight: 600;\n    font-size: 1.1em;\n    color: var(--theme-text-color);\n}\n\n.grid-cell.occupied {\n    background: #ddd !important;\n    cursor: not-allowed !important;\n    opacity: 0.5;\n    color: #999;\n}\n\n.grid-cell.selected {\n    background: #d4fc79 !important;\n    border-color: #28a745 !important;\n    font-weight: 700;\n    color: #155724;\n}\n\n@media (max-width: 768px) {\n    .grid-cell {\n        padding: 14px 6px;\n        font-size: 1em;\n    }\n}\n\n@media (max-width: 480px) {\n    .grid-cell {\n        padding: 12px 4px;\n        font-size: 0.95em;\n    }\n}\n\n/* ==================== 全局移动端优化 ==================== */\n\n/* 防止双击缩放 */\n* {\n    touch-action: manipulation;\n}\n\n/* 优化滚动体验 */\n.event-body,\n#info-modal-details,\n#history-content,\n#achievement-content,\n#relation-content {\n    -webkit-overflow-scrolling: touch;\n    overflow-y: auto;\n}\n\n.canvas-viewport {\n    -webkit-overflow-scrolling: touch;\n}\n\n/* 移动端字体优化 */\n@media (max-width: 768px) {\n    body {\n        -webkit-text-size-adjust: 100%;\n        -ms-text-size-adjust: 100%;\n        text-size-adjust: 100%;\n    }\n}\n\n/* 小屏幕下的楼层布局优化 */\n@media (max-width: 768px) {\n    .level {\n        /* 保持固定宽度，允许横向滚动，不压缩 */\n        width: 1275px;\n        min-width: 1275px;\n    }\n    \n    .floor-wrapper {\n        /* 保持固定宽度，允许横向滚动，不压缩 */\n        min-width: 1515px;\n    }\n    \n    .add-floor-btn {\n        /* 保持固定宽度，允许横向滚动，不压缩 */\n        min-width: 1515px;\n    }\n}\n\n/* 超小屏幕优化 */\n@media (max-width: 360px) {\n    .mobile-header {\n        font-size: 0.75em;\n    }\n    \n    .dock-button-icon {\n        font-size: 18px !important;\n    }\n    \n    .room-card {\n        font-size: 0.8em;\n        padding: 10px 6px;\n        min-height: 60px;\n    }\n    \n    .event-section-title {\n        font-size: 1em;\n    }\n}\n\n/* 横屏优化 */\n@media (orientation: landscape) and (max-height: 500px) {\n    .apartment-main-panel {\n        height: 95%;\n        max-height: none;\n    }\n    \n    .mobile-header {\n        padding: 8px 16px;\n    }\n    \n    .mobile-footer {\n        padding: 6px 4px;\n        /* 🔧 横屏模式下也要考虑底部安全区域 */\n        padding-bottom: max(6px, calc(env(safe-area-inset-bottom, 0px) + 6px));\n    }\n    \n    .dock-button {\n        padding: 4px 2px;\n        gap: 2px;\n    }\n    \n    .dock-button-icon {\n        font-size: 20px;\n    }\n}\n</style>\n`;\n\n// ==================== HTML 结构 ====================\nconst html = `\n<!-- 拖动按钮 -->\n<div id=\"apartment-toggle-btn\" class=\"apartment-toggle-btn\">\n    <span>🏢</span>\n</div>\n\n<!-- 主面板 -->\n<div id=\"apartment-main-panel\" class=\"apartment-main-panel\">\n    <header class=\"mobile-header\">\n        <div>\n            <span id=\"date-display\">加载中...</span> |\n            <span id=\"time-display\"></span>\n        </div>\n        <div id=\"mode-display\"></div>\n    </header>\n    \n    <div class=\"canvas-viewport\" id=\"screen\">\n        <div id=\"apartment-canvas\">\n            <!-- 动态生成的公寓楼层将插入这里 -->\n        </div>\n        <div class=\"floating-ui\">\n            <button id=\"execute-actions-btn\" class=\"confirm-btn hidden\"></button>\n            <div class=\"zoom-controls\">\n                <button id=\"zoom-in-btn\" class=\"zoom-btn\">+</button>\n                <button id=\"zoom-out-btn\" class=\"zoom-btn\">-</button>\n            </div>\n        </div>\n    </div>\n    \n    <footer class=\"mobile-footer\">\n        <button id=\"recruitment-btn\" class=\"dock-button\">\n            <span class=\"dock-button-icon\">👤</span>\n            <span>招募</span>\n        </button>\n        <button id=\"build-mode-btn\" class=\"dock-button\">\n            <span class=\"dock-button-icon\">🔨</span>\n            <span>建造</span>\n        </button>\n        <button id=\"event-generator-btn\" class=\"dock-button\">\n            <span class=\"dock-button-icon\">🎲</span>\n            <span>事件</span>\n        </button>\n        <button id=\"history-btn\" class=\"dock-button\">\n            <span class=\"dock-button-icon\">📜</span>\n            <span>历史</span>\n        </button>\n        <button id=\"achievement-btn\" class=\"dock-button\">\n            <span class=\"dock-button-icon\">🏆</span>\n            <span>成就</span>\n        </button>\n        <button id=\"relation-btn\" class=\"dock-button\">\n            <span class=\"dock-button-icon\">🕸️</span>\n            <span>关系</span>\n        </button>\n        <button id=\"settings-btn\" class=\"dock-button\">\n            <span class=\"dock-button-icon\">⚙️</span>\n            <span>设置</span>\n        </button>\n    </footer>\n    \n    <!-- 事件模态框 -->\n    <div id=\"event-modal\" class=\"event-modal\">\n        <div class=\"event-header\" id=\"close-event-modal-btn\">事件生成器 (点击此处关闭)</div>\n        <div class=\"event-body\">\n            <div style=\"margin-bottom: 25px;\">\n                <h3 class=\"event-section-title\">个人事件</h3>\n                <div class=\"event-buttons-grid\" id=\"single-events\">\n                    <button class=\"event-button\" data-event-type=\"个人情感类\">情感求助</button>\n                    <button class=\"event-button\" data-event-type=\"生活经济类\">经济困难</button>\n                    <button class=\"event-button\" data-event-type=\"日常委托类\">日常委托</button>\n                    <button class=\"event-button\" data-event-type=\"家居修理类\">家居修理</button>\n                    <button class=\"event-button random\" data-event-type=\"random-single\">🎲 随机一件</button>\n                </div>\n            </div>\n            <div>\n                <h3 class=\"event-section-title\">集体事件</h3>\n                <div class=\"event-buttons-grid\" id=\"group-events\">\n                    <button class=\"event-button\" data-event-type=\"节日派对类\">节日派对</button>\n                    <button class=\"event-button\" data-event-type=\"室内娱乐类\">室内娱乐</button>\n                    <button class=\"event-button\" data-event-type=\"突发状况类\">突发状况</button>\n                    <button class=\"event-button\" data-event-type=\"共同创作类\">共同创作</button>\n                    <button class=\"event-button random\" data-event-type=\"random-group\">🎲 随机一件</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!-- 所有模态框 -->\n<div id=\"add-room-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <h2 class=\"modal-title\" id=\"add-room-modal-title\">新建空房间</h2>\n        <p class=\"modal-subtitle\" id=\"add-room-modal-subtitle\" style=\"white-space: pre-line;\"></p>\n        <div class=\"modal-functional-input\">\n            <div id=\"grid-selector-container\" style=\"margin: 15px 0;\">\n                <label style=\"font-weight: bold; margin-bottom: 10px; display: block;\">\n                    选择房间位置（点击并拖动选择连续格子）：\n                </label>\n                <div id=\"grid-selector\" style=\"display: grid; grid-template-columns: repeat(10, 1fr); gap: 5px; margin: 10px 0; user-select: none;\"></div>\n                <p id=\"selected-range-display\" style=\"margin-top: 10px; font-size: 0.9em; color: var(--theme-subtitle-color);\"></p>\n            </div>\n            <button id=\"confirm-add-room-btn\" class=\"modal-confirm-btn\">确认新建空房间</button>\n        </div>\n    </div>\n</div>\n\n<div id=\"add-floor-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <h2 class=\"modal-title\">新建楼层</h2>\n        <div class=\"modal-functional-input\">\n            <label>楼层名称：</label>\n            <input type=\"text\" id=\"add-floor-name\" placeholder=\"例如：五楼、地下二楼\">\n            <label>楼层位置：</label>\n            <select id=\"add-floor-position\">\n                <option value=\"top\">最顶层（向上扩展）</option>\n                <option value=\"bottom\">最底层（向下扩展）</option>\n            </select>\n            <button id=\"confirm-add-floor-btn\" class=\"modal-confirm-btn\">确认新建</button>\n        </div>\n    </div>\n</div>\n\n<div id=\"management-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <h2 id=\"management-modal-title\" class=\"modal-title\"></h2>\n        <p id=\"management-modal-subtitle\" class=\"modal-subtitle\"></p>\n        <div id=\"management-modal-choices\" class=\"modal-choices\"></div>\n    </div>\n</div>\n\n<div id=\"info-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <div id=\"info-modal-header\">\n            <button id=\"info-modal-close-btn\" class=\"modal-close-btn\">×</button>\n            <h2 id=\"info-modal-title\" class=\"modal-title\"></h2>\n            <p id=\"info-modal-subtitle\" class=\"modal-subtitle\"></p>\n        </div>\n        <div id=\"info-modal-details\"></div>\n    </div>\n</div>\n\n<div id=\"recruitment-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <h2 class=\"modal-title\">招募新租客</h2>\n        <p class=\"modal-subtitle\">请输入您期望的租客特征</p>\n        <div class=\"modal-functional-input\">\n            <input type=\"text\" id=\"recruitment-keywords\" placeholder=\"例如：人妻、金发、JK\">\n            <button id=\"confirm-recruitment-btn\" class=\"modal-confirm-btn\">确认招募</button>\n        </div>\n    </div>\n</div>\n\n<div id=\"history-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <button id=\"history-modal-close-btn\" class=\"modal-close-btn\">×</button>\n        <h2 class=\"modal-title\">📜 事件历史</h2>\n        <div id=\"history-content\">\n            <p style=\"color: var(--theme-subtitle-color);\">加载中...</p>\n        </div>\n    </div>\n</div>\n\n<div id=\"achievement-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <button id=\"achievement-modal-close-btn\" class=\"modal-close-btn\">×</button>\n        <h2 class=\"modal-title\">🏆 成就列表</h2>\n        <div id=\"achievement-content\">\n            <p style=\"color: var(--theme-subtitle-color);\">加载中...</p>\n        </div>\n    </div>\n</div>\n\n<div id=\"settings-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <h2 class=\"modal-title\">系统设置</h2>\n        <div class=\"modal-choices\">\n            <button data-theme=\"light\">☀️ 光辉白日</button>\n            <button data-theme=\"dark\">🌙 静谧夜晚</button>\n        </div>\n    </div>\n</div>\n\n<div id=\"relation-modal\" class=\"modal-overlay hidden\">\n    <div class=\"modal-content\">\n        <button id=\"relation-modal-close-btn\" class=\"modal-close-btn\">×</button>\n        <h2 class=\"modal-title\">🕸️ 关系网络</h2>\n        <p class=\"modal-subtitle\" style=\"margin-bottom: 15px;\">点击查看该角色对其他人的关系</p>\n        <div id=\"relation-content\">\n            <p style=\"color: var(--theme-subtitle-color);\">加载中...</p>\n        </div>\n    </div>\n</div>\n`;\n\n// ==================== JavaScript 功能实现 ====================\n\n// 全局变量\nlet isBuildMode = false;\nlet actionQueue = {};\nlet currentEditingRoomId = null;\nlet currentEditingRoomName = null;\nlet currentFloorForNewRoom = null;\nlet cachedMVUData = null;\nlet btnDragData = null;  // 按钮拖动数据\nlet tempRoomCounters = {};  // 临时跟踪每个楼层新建的房间数（防止重复编号）\n\nlet scale = 1, posX = 0, posY = 0;\nlet isDragging = false, hasDragged = false;\nlet startX, startY, lastX, lastY;\n\nconst MAX_RETRIES = 5;\nconst RETRY_DELAY = 400;\nlet currentRetry = 0;\n\n// ==================== 工具函数 ====================\nfunction SafeGetValue(data, path, defaultValue = '未知') {\n    if (!data) return defaultValue;\n    const keys = path.split('.');\n    let current = data;\n    for (const key of keys) {\n        if (current === undefined || current === null || typeof current !== 'object' || !current.hasOwnProperty(key)) {\n            return defaultValue;\n        }\n        current = current[key];\n    }\n    if (current === undefined || current === null) return defaultValue;\n    if (Array.isArray(current) && current.length > 0) {\n        const value = current[0];\n        return String(value) === '' ? defaultValue : String(value);\n    }\n    return String(current) === '' ? defaultValue : String(current);\n}\n\nfunction countCurrentTenants(data) {\n    const tenantList = data?.租客列表?.[0];\n    if (!tenantList) return 0;\n    let count = 0;\n    for (const key in tenantList) {\n        if (key !== '$meta' && typeof tenantList[key] === 'object') {\n            count++;\n        }\n    }\n    return count;\n}\n\nfunction countAvailableBedrooms(data) {\n    const roomsData = data?.公寓?.房间列表?.[0];\n    if (!roomsData) return 0;\n    let bedroomCount = 0;\n    for (const roomKey in roomsData) {\n        if (roomKey === '$meta') continue;\n        const roomData = roomsData[roomKey];\n        const roomType = SafeGetValue(roomData, '类型');\n        // 只统计卧室类型的房间\n        if (roomType === '卧室') {\n            bedroomCount++;\n        }\n    }\n    return bedroomCount;\n}\n\nfunction parsePosition(posStr) {\n    const parts = posStr.split('-');\n    return { start: parseInt(parts[0]), end: parseInt(parts[1]) };\n}\n\nfunction calculateSize(posStr) {\n    const pos = parsePosition(posStr);\n    return pos.end - pos.start + 1;\n}\n\nfunction findAvailableSlots(floorName, roomsData, totalCapacity = 10) {\n    const occupied = [];\n    for (const roomKey in roomsData) {\n        if (roomKey === '$meta') continue;\n        const layout = roomsData[roomKey]?.布局;\n        if (layout && SafeGetValue(layout, '楼层') === floorName) {\n            const pos = parsePosition(SafeGetValue(layout, '位置', '1-2'));\n            for (let i = pos.start; i <= pos.end; i++) {\n                occupied.push(i);\n            }\n        }\n    }\n    const available = [];\n    let start = null;\n    for (let i = 1; i <= totalCapacity; i++) {\n        if (!occupied.includes(i)) {\n            if (start === null) start = i;\n            if (i === totalCapacity || occupied.includes(i + 1)) {\n                available.push({ start, end: i, size: i - start + 1 });\n                start = null;\n            }\n        } else {\n            start = null;\n        }\n    }\n    return available;\n}\n\n// ==================== 初始化函数 ====================\nfunction initializeApartmentPlugin() {\n    console.log('🚀 初始化掌上公寓插件...');\n    \n    // 获取目标文档\n    const targetDoc = window.top ? window.top.document : document;\n    \n    // 检查是否已存在\n    if (targetDoc.getElementById('apartment-toggle-btn')) {\n        console.log('⚠️ 掌上公寓已存在，先移除旧的');\n        targetDoc.getElementById('apartment-toggle-btn')?.remove();\n        targetDoc.getElementById('apartment-main-panel')?.remove();\n        // 移除所有模态框\n        targetDoc.querySelectorAll('[id$=\"-modal\"]').forEach(el => {\n            if (el.id.includes('apartment') || el.id.includes('add-') || el.id.includes('management') || \n                el.id.includes('info') || el.id.includes('recruitment') || el.id.includes('history') || \n                el.id.includes('achievement') || el.id.includes('settings')) {\n                el.remove();\n            }\n        });\n        \n        // 清理事件\n        $(targetDoc).off('.apartment-plugin');\n    }\n    \n    // 注入样式\n    if (!targetDoc.getElementById('apartment-plugin-styles')) {\n        targetDoc.head.insertAdjacentHTML('beforeend', styles);\n        console.log('✅ 样式已注入');\n    }\n    \n    // 注入 HTML\n    targetDoc.body.insertAdjacentHTML('beforeend', html);\n    console.log('✅ HTML 已注入');\n    \n    // 从 localStorage 恢复按钮位置\n    const btn = targetDoc.getElementById('apartment-toggle-btn');\n    try {\n        const saved = localStorage.getItem('apartment-btn-position');\n        if (saved) {\n            const pos = JSON.parse(saved);\n            btn.style.left = pos.left + 'px';\n            btn.style.top = pos.top + 'px';\n            console.log('📍 恢复按钮位置:', pos);\n        }\n    } catch (e) {\n        console.warn('⚠️ 恢复按钮位置失败');\n    }\n    \n    // 初始化按钮拖动功能\n    initializeButtonDrag(targetDoc);\n    \n    // 初始化公寓系统\n    initializeApartmentSystem(targetDoc);\n    \n    console.log('✅ 掌上公寓插件初始化完成！');\n}\n\n// ==================== 按钮拖动功能 ====================\nfunction initializeButtonDrag(targetDoc) {\n    const btn = targetDoc.getElementById('apartment-toggle-btn');\n    const panel = targetDoc.getElementById('apartment-main-panel');\n    const $targetDoc = $(targetDoc);\n    \n    // 拖动开始\n    function handleBtnDragStart(clientX, clientY) {\n        if (btnDragData) return false;\n        \n        const computedStyle = window.getComputedStyle(btn);\n        const currentLeft = parseInt(computedStyle.left) || 0;\n        const currentTop = parseInt(computedStyle.top) || 0;\n        \n        btnDragData = {\n            startX: clientX,\n            startY: clientY,\n            initialLeft: currentLeft,\n            initialTop: currentTop\n        };\n        \n        btn.classList.add('dragging');\n        console.log('🖱️ 开始拖动按钮');\n        return true;\n    }\n    \n    // 拖动移动\n    function handleBtnDragMove(clientX, clientY) {\n        if (!btnDragData) return;\n        \n        const deltaX = clientX - btnDragData.startX;\n        const deltaY = clientY - btnDragData.startY;\n        \n        let newLeft = btnDragData.initialLeft + deltaX;\n        let newTop = btnDragData.initialTop + deltaY;\n        \n        // 限制范围\n        const targetWindow = window.top || window;\n        const maxX = $(targetWindow).width() - 80;\n        const maxY = $(targetWindow).height() - 80;\n        \n        newLeft = Math.max(0, Math.min(newLeft, maxX));\n        newTop = Math.max(0, Math.min(newTop, maxY));\n        \n        btn.style.left = newLeft + 'px';\n        btn.style.top = newTop + 'px';\n    }\n    \n    // 拖动结束\n    function handleBtnDragEnd(clientX, clientY) {\n        if (!btnDragData) return;\n        \n        btn.classList.remove('dragging');\n        \n        // 计算拖动距离\n        const deltaX = clientX - btnDragData.startX;\n        const deltaY = clientY - btnDragData.startY;\n        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n        \n        // 保存位置\n        const computedStyle = window.getComputedStyle(btn);\n        const currentLeft = parseInt(computedStyle.left) || 0;\n        const currentTop = parseInt(computedStyle.top) || 0;\n        \n        const position = {\n            left: currentLeft,\n            top: currentTop\n        };\n        \n        localStorage.setItem('apartment-btn-position', JSON.stringify(position));\n        console.log('✅ 按钮拖动结束，保存位置:', position);\n        \n        btnDragData = null;\n        \n        // 如果是点击（移动距离小于5像素），打开/关闭面板\n        if (distance < 5) {\n            console.log('🎨 检测到点击，切换面板');\n            panel.classList.toggle('active');\n            // 打开面板时加载数据\n            if (panel.classList.contains('active')) {\n                currentRetry = 0;  // 重置重试计数器\n                populateDataWithMVU(targetDoc);\n            }\n        }\n    }\n    \n    // 绑定事件\n    $(btn).on('mousedown.apartment-plugin', function(e) {\n        if (handleBtnDragStart(e.clientX, e.clientY)) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    });\n    \n    $(btn).on('touchstart.apartment-plugin', function(e) {\n        const touch = e.originalEvent.touches[0];\n        if (handleBtnDragStart(touch.clientX, touch.clientY)) {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    });\n    \n    $targetDoc.on('mousemove.apartment-plugin', function(e) {\n        handleBtnDragMove(e.clientX, e.clientY);\n        if (btnDragData) e.preventDefault();\n    });\n    \n    $targetDoc.on('touchmove.apartment-plugin', function(e) {\n        const touch = e.originalEvent.touches[0];\n        handleBtnDragMove(touch.clientX, touch.clientY);\n        if (btnDragData) e.preventDefault();\n    });\n    \n    $targetDoc.on('mouseup.apartment-plugin', function(e) {\n        handleBtnDragEnd(e.clientX, e.clientY);\n    });\n    \n    $targetDoc.on('touchend.apartment-plugin touchcancel.apartment-plugin', function(e) {\n        const touch = e.originalEvent.changedTouches[0];\n        if (touch) {\n            handleBtnDragEnd(touch.clientX, touch.clientY);\n        } else {\n            handleBtnDragEnd(0, 0);\n        }\n    });\n    \n    console.log('✅ 按钮拖动功能已初始化');\n}\n\n// ==================== 公寓系统初始化 ====================\nfunction initializeApartmentSystem(targetDoc) {\n    const screen = targetDoc.getElementById('screen');\n    const canvas = targetDoc.getElementById('apartment-canvas');\n    const modeDisplay = targetDoc.getElementById('mode-display');\n    const buildModeBtn = targetDoc.getElementById('build-mode-btn');\n    const allModals = targetDoc.querySelectorAll('.modal-overlay');\n    \n    // 设置初始模式\n    modeDisplay.textContent = '观察模式';\n    modeDisplay.className = 'observation-mode';\n    \n    // 视图控制函数 - 直接更新，最高性能\n    function updateTransform() {\n        canvas.style.transform = `translate(calc(-50% + ${posX}px), calc(-50% + ${posY}px)) scale(${scale})`;\n    }\n    \n    function zoom(factor) {\n        // 添加缩放动画类\n        canvas.classList.add('zooming');\n        \n        scale = Math.min(Math.max(0.2, scale * factor), 2);\n        updateTransform();\n        \n        // 动画结束后移除类\n        setTimeout(() => {\n            canvas.classList.remove('zooming');\n        }, 300);\n    }\n    \n    // 拖动画布\n    function handleDragStart(e) {\n        // 检查是否点击在按钮等UI控件上（不包括房间卡片，房间卡片需要接收点击）\n        const target = e.target;\n        if (target.closest('.dock-button') || \n            target.closest('.zoom-btn') || \n            target.closest('.confirm-btn') ||\n            target.closest('.add-room-btn') ||\n            target.closest('.add-floor-btn') ||\n            target.closest('.level-title') ||\n            (target.tagName === 'BUTTON' && !target.closest('.room-card'))) {\n            return; // 点击UI控件时不触发拖动\n        }\n        \n        e.preventDefault(); // 阻止浏览器默认行为\n        canvas.classList.remove('zooming'); // 确保拖动时没有过渡动画\n        isDragging = true;\n        hasDragged = false;\n        const touch = e.touches ? e.touches[0] : e;\n        startX = touch.clientX;\n        startY = touch.clientY;\n        lastX = posX;\n        lastY = posY;\n    }\n    \n    function handleDragMove(e) {\n        if (!isDragging) return;\n        \n        const touch = e.touches ? e.touches[0] : e;\n        const currentX = touch.clientX;\n        const currentY = touch.clientY;\n        const deltaX = currentX - startX;\n        const deltaY = currentY - startY;\n        \n        // 降低阈值到3像素，让拖动更灵敏\n        if (!hasDragged && (Math.abs(deltaX) > 3 || Math.abs(deltaY) > 3)) {\n            hasDragged = true;\n            e.preventDefault();\n        }\n        \n        if (hasDragged) {\n            e.preventDefault();\n            posX = lastX + deltaX;\n            posY = lastY + deltaY;\n            canvas.style.transform = `translate(calc(-50% + ${posX}px), calc(-50% + ${posY}px)) scale(${scale})`;\n        }\n    }\n    \n    function handleDragEnd(e) {\n        if (isDragging) {\n            isDragging = false;\n        }\n        \n        // 延迟重置 hasDragged，让 onclick 能够正确判断\n        if (hasDragged) {\n            setTimeout(() => {\n                hasDragged = false;\n            }, 50);\n        }\n    }\n    \n    // 绑定画布拖动事件 - 使用非被动模式确保立即响应\n    screen.addEventListener('mousedown', handleDragStart, { passive: false });\n    targetDoc.addEventListener('mousemove', handleDragMove, { passive: false });\n    targetDoc.addEventListener('mouseup', handleDragEnd, { passive: false });\n    screen.addEventListener('touchstart', handleDragStart, { passive: false });\n    targetDoc.addEventListener('touchmove', handleDragMove, { passive: false });\n    targetDoc.addEventListener('touchend', handleDragEnd, { passive: false });\n    \n    // 辅助函数：点击后移除焦点\n    const clickAndBlur = (element, handler) => {\n        element.addEventListener('click', (e) => {\n            handler();\n            setTimeout(() => element.blur(), 0);\n        });\n    };\n    \n    // 绑定按钮事件（点击后自动移除焦点，防止出现焦点框）\n    clickAndBlur(targetDoc.getElementById('zoom-in-btn'), () => zoom(1.2));\n    clickAndBlur(targetDoc.getElementById('zoom-out-btn'), () => zoom(0.8));\n    clickAndBlur(targetDoc.getElementById('build-mode-btn'), toggleBuildMode);\n    clickAndBlur(targetDoc.getElementById('recruitment-btn'), openRecruitmentModal);\n    clickAndBlur(targetDoc.getElementById('settings-btn'), openSettingsModal);\n    clickAndBlur(targetDoc.getElementById('event-generator-btn'), openEventGenerator);\n    clickAndBlur(targetDoc.getElementById('history-btn'), openHistoryModal);\n    clickAndBlur(targetDoc.getElementById('achievement-btn'), openAchievementModal);\n    clickAndBlur(targetDoc.getElementById('relation-btn'), openRelationModal);\n    \n    // 绑定模态框关闭\n    allModals.forEach(modal => {\n        modal.addEventListener('click', (e) => {\n            if (e.target === modal) closeAllModals();\n        });\n    });\n    \n    // 新建房间相关（点击后移除焦点）\n    clickAndBlur(targetDoc.getElementById('confirm-add-room-btn'), confirmAddRoom);\n    clickAndBlur(targetDoc.getElementById('confirm-add-floor-btn'), confirmAddFloor);\n    clickAndBlur(targetDoc.getElementById('confirm-recruitment-btn'), confirmRecruitment);\n    \n    // 🔧 所有模态框的关闭按钮\n    const infoModalCloseBtn = targetDoc.getElementById('info-modal-close-btn');\n    if (infoModalCloseBtn) {\n        clickAndBlur(infoModalCloseBtn, closeAllModals);\n    }\n    \n    const historyModalCloseBtn = targetDoc.getElementById('history-modal-close-btn');\n    if (historyModalCloseBtn) {\n        clickAndBlur(historyModalCloseBtn, closeAllModals);\n    }\n    \n    const achievementModalCloseBtn = targetDoc.getElementById('achievement-modal-close-btn');\n    if (achievementModalCloseBtn) {\n        clickAndBlur(achievementModalCloseBtn, closeAllModals);\n    }\n    \n    const relationModalCloseBtn = targetDoc.getElementById('relation-modal-close-btn');\n    if (relationModalCloseBtn) {\n        clickAndBlur(relationModalCloseBtn, closeAllModals);\n    }\n    \n    // 设置主题切换\n    targetDoc.querySelector('#settings-modal .modal-choices').addEventListener('click', (e) => {\n        if (e.target.dataset.theme) switchTheme(e.target.dataset.theme);\n    });\n    \n    // 事件生成器\n    clickAndBlur(targetDoc.getElementById('close-event-modal-btn'), closeEventGenerator);\n    targetDoc.getElementById('single-events').addEventListener('click', (e) => {\n        if (e.target.matches('.event-button')) {\n            triggerEvent(e.target.dataset.eventType, '个人');\n        }\n    });\n    targetDoc.getElementById('group-events').addEventListener('click', (e) => {\n        if (e.target.matches('.event-button')) {\n            triggerEvent(e.target.dataset.eventType, '集体');\n        }\n    });\n    \n    // 模式切换函数\n    function toggleBuildMode() {\n        isBuildMode = !isBuildMode;\n        buildModeBtn.classList.toggle('active');\n        if (isBuildMode) {\n            modeDisplay.textContent = '建造模式';\n            modeDisplay.className = 'build-mode';\n        } else {\n            modeDisplay.textContent = '观察模式';\n            modeDisplay.className = 'observation-mode';\n        }\n        if (cachedMVUData) {\n            renderApartment(cachedMVUData, targetDoc);\n        }\n    }\n    \n    // 居中视图\n    function centerView() {\n        setTimeout(() => {\n            const viewportWidth = screen.offsetWidth;\n            const viewportHeight = screen.offsetHeight;\n            const canvasWidth = 1515;\n            \n            const scaleX = (viewportWidth - 40) / canvasWidth;\n            const scaleY = (viewportHeight - 40) / 800;\n            scale = Math.min(1, Math.max(0.25, Math.min(scaleX, scaleY)));\n            \n            posX = 0;\n            posY = 0;\n            \n            updateTransform();\n        }, 200);\n    }\n    \n    centerView();\n    console.log('✅ 公寓系统已初始化');\n}\n\n// ==================== 数据加载函数 ====================\nasync function populateDataWithMVU(targetDoc) {\n    try {\n        // 检查MVU是否可用\n        if (typeof Mvu === 'undefined') {\n            // 尝试从父窗口获取\n            if (window.parent && typeof window.parent.Mvu !== 'undefined') {\n                window.Mvu = window.parent.Mvu;\n                console.log('✅ 已从父窗口引用MVU');\n            } else {\n                console.warn('⚠️ MVU框架未加载');\n                if (currentRetry < MAX_RETRIES) {\n                    currentRetry++;\n                    setTimeout(() => populateDataWithMVU(targetDoc), RETRY_DELAY);\n                } else {\n                    targetDoc.getElementById('date-display').innerText = \"MVU未加载\";\n                }\n                return;\n            }\n        }\n        \n        // 智能获取应该显示的数据\n        let targetMessageId = 'latest';\n        if (typeof getLastMessageId === 'function' && typeof getChatMessages === 'function') {\n            let currentId = getLastMessageId();\n            \n            while (currentId >= 0) {\n                const message = getChatMessages(currentId).at(-1);\n                if (message && message.role !== 'user') {\n                    targetMessageId = currentId;\n                    if (currentId !== getLastMessageId()) {\n                        console.log(`📝 向上查找到第 ${currentId} 层的AI消息`);\n                    }\n                    break;\n                }\n                currentId--;\n            }\n            \n            if (currentId < 0) {\n                targetMessageId = 'latest';\n                console.warn('⚠️ 没有找到AI消息，使用最后一层');\n            }\n        }\n        \n        // 使用Mvu.getMvuData获取数据\n        const mvuResult = Mvu.getMvuData({ type: 'message', message_id: targetMessageId });\n        const data = mvuResult?.stat_data;\n        \n        if (!data) {\n            console.warn('⚠️ MVU数据为空');\n            if (currentRetry < MAX_RETRIES) {\n                currentRetry++;\n                setTimeout(() => populateDataWithMVU(targetDoc), RETRY_DELAY);\n            } else {\n                targetDoc.getElementById('date-display').innerText = \"未能加载数据QAQ\";\n            }\n            return;\n        }\n        \n        cachedMVUData = data;\n        console.log('✅ 数据加载成功', data);\n        \n        // 🔧 重置临时房间计数器（数据刷新说明之前的命令已执行）\n        tempRoomCounters = {};\n        \n        // 更新时间显示\n        const world = data.世界;\n        targetDoc.getElementById('date-display').textContent = `${SafeGetValue(world, '年份')} ${SafeGetValue(world, '日期')} ${SafeGetValue(world, '星期')}`;\n        targetDoc.getElementById('time-display').textContent = SafeGetValue(world, '时间');\n        \n        // 更新招募按钮状态：只有租客数量 < 卧室数量且 < 6 时才能招募\n        const tenantCount = countCurrentTenants(data);\n        const bedroomCount = countAvailableBedrooms(data);\n        // 租客数量必须小于卧室数量，且不超过6个（防止AI注意不过来）\n        targetDoc.getElementById('recruitment-btn').disabled = (tenantCount >= bedroomCount || tenantCount >= 6);\n        \n        // 渲染公寓\n        renderApartment(data, targetDoc);\n        \n    } catch (error) {\n        console.error(\"状态栏加载出错:\", error);\n        console.error(\"错误详情:\", error.stack);\n        targetDoc.getElementById('date-display').innerText = \"加载出错: \" + error.message;\n    }\n}\n\n// ==================== 渲染公寓 ====================\nfunction renderApartment(data, targetDoc) {\n    const floorConfig = data.公寓?.楼层配置;\n    const roomsData = data.公寓?.房间列表?.[0];\n    \n    if (!floorConfig || !roomsData) return;\n    \n    const floors = [];\n    for (const floorKey in floorConfig) {\n        if (floorKey === '$meta') continue;\n        const floorInfo = floorConfig[floorKey];\n        floors.push({\n            key: floorKey,\n            name: SafeGetValue(floorInfo, '显示名称', floorKey),\n            order: parseFloat(SafeGetValue(floorInfo, '顺序', '999')),\n            capacity: parseInt(SafeGetValue(floorInfo, '总容量', '10'))\n        });\n    }\n    floors.sort((a, b) => b.order - a.order);\n    \n    const canvas = targetDoc.getElementById('apartment-canvas');\n    canvas.innerHTML = '';\n    \n    // 添加新建楼层按钮（顶部）\n    if (isBuildMode) {\n        const addTopFloorBtn = document.createElement('button');\n        addTopFloorBtn.className = 'add-floor-btn';\n        addTopFloorBtn.textContent = '➕ 新建楼层（向上扩展）';\n        addTopFloorBtn.onclick = () => openAddFloorModal('top');\n        canvas.appendChild(addTopFloorBtn);\n    }\n    \n    // 渲染每个楼层\n    floors.forEach(floor => {\n        const floorElement = createFloorElement(floor, roomsData, targetDoc);\n        canvas.appendChild(floorElement);\n    });\n    \n    // 添加新建楼层按钮（底部）\n    if (isBuildMode) {\n        const addBottomFloorBtn = document.createElement('button');\n        addBottomFloorBtn.className = 'add-floor-btn';\n        addBottomFloorBtn.textContent = '➕ 新建楼层（向下扩展）';\n        addBottomFloorBtn.onclick = () => openAddFloorModal('bottom');\n        canvas.appendChild(addBottomFloorBtn);\n    }\n}\n\n// ==================== 创建楼层元素 ====================\nfunction createFloorElement(floor, roomsData, targetDoc) {\n    const floorRooms = [];\n    const outdoorRooms = { left: null, right: null };\n    \n    for (const roomKey in roomsData) {\n        if (roomKey === '$meta') continue;\n        const roomData = roomsData[roomKey];\n        const layout = roomData?.布局;\n        if (layout && SafeGetValue(layout, '楼层') === floor.name) {\n            const position = SafeGetValue(layout, '位置', '1-2');\n            \n            if (position === 'outdoor-left') {\n                outdoorRooms.left = { key: roomKey, data: roomData };\n            } else if (position === 'outdoor-right') {\n                outdoorRooms.right = { key: roomKey, data: roomData };\n            } else {\n                const pos = parsePosition(position);\n                floorRooms.push({\n                    key: roomKey,\n                    data: roomData,\n                    position: position,\n                    start: pos.start,\n                    end: pos.end,\n                    size: pos.end - pos.start + 1\n                });\n            }\n        }\n    }\n    floorRooms.sort((a, b) => a.start - b.start);\n    \n    const floorWrapper = document.createElement('div');\n    floorWrapper.className = 'floor-wrapper';\n    \n    // 左侧区域\n    const leftDiv = document.createElement('div');\n    leftDiv.className = 'floor-outdoor-left';\n    if (outdoorRooms.left) {\n        leftDiv.appendChild(createOutdoorCard(outdoorRooms.left, targetDoc));\n    }\n    floorWrapper.appendChild(leftDiv);\n    \n    // 主楼层\n    const mainDiv = document.createElement('div');\n    mainDiv.className = 'floor-main';\n    \n    const floorDiv = document.createElement('div');\n    floorDiv.className = 'level';\n    floorDiv.dataset.floorKey = floor.key;\n    \n    const titleDiv = document.createElement('div');\n    titleDiv.className = 'level-title';\n    titleDiv.textContent = floor.name;\n    floorDiv.appendChild(titleDiv);\n    \n    const gridDiv = document.createElement('div');\n    gridDiv.className = 'room-grid';\n    \n    let currentPos = 1;\n    floorRooms.forEach(room => {\n        if (room.start > currentPos) {\n            const emptySize = room.start - currentPos;\n            const emptyDiv = document.createElement('div');\n            emptyDiv.className = 'placeholder';\n            emptyDiv.style.flexGrow = emptySize;\n            gridDiv.appendChild(emptyDiv);\n        }\n        \n        const roomCard = createRoomCard(room, targetDoc);\n        gridDiv.appendChild(roomCard);\n        currentPos = room.end + 1;\n    });\n    \n    if (currentPos <= floor.capacity) {\n        const emptySize = floor.capacity - currentPos + 1;\n        const emptyDiv = document.createElement('div');\n        emptyDiv.className = 'placeholder';\n        emptyDiv.style.flexGrow = emptySize;\n        gridDiv.appendChild(emptyDiv);\n    }\n    \n    floorDiv.appendChild(gridDiv);\n    \n    if (isBuildMode) {\n        const availableSlots = findAvailableSlots(floor.name, roomsData, floor.capacity);\n        if (availableSlots.length > 0) {\n            const addRoomBtn = document.createElement('button');\n            addRoomBtn.className = 'add-room-btn';\n            addRoomBtn.textContent = `➕ 在${floor.name}新建房间`;\n            addRoomBtn.onclick = () => openAddRoomModal(floor.name, availableSlots);\n            floorDiv.appendChild(addRoomBtn);\n        }\n    }\n    \n    mainDiv.appendChild(floorDiv);\n    floorWrapper.appendChild(mainDiv);\n    \n    // 右侧区域\n    const rightDiv = document.createElement('div');\n    rightDiv.className = 'floor-outdoor-right';\n    if (outdoorRooms.right) {\n        rightDiv.appendChild(createOutdoorCard(outdoorRooms.right, targetDoc));\n    }\n    floorWrapper.appendChild(rightDiv);\n    \n    return floorWrapper;\n}\n\n//====================创建室外卡片====================\nfunction createOutdoorCard(outdoorRoom, targetDoc) {\n    const card = document.createElement('div');\n    card.className = 'room-card outdoor-room outdoor-card actionable';\n    card.dataset.roomName = outdoorRoom.key;\n    \n    const roomName = SafeGetValue(outdoorRoom.data, '名称');\n    const nameSpan = document.createElement('span');\n    nameSpan.className = 'room-name';\n    nameSpan.textContent = roomName;\n    card.appendChild(nameSpan);\n    \n    // 阻止房间卡片触发画布拖动\n    card.addEventListener('mousedown', (e) => {\n        e.stopPropagation();\n    });\n    \n    // PC端点击事件\n    card.onclick = (e) => {\n        e.stopPropagation();\n        handleRoomClick(card, targetDoc);\n    };\n    \n    // 移动端触摸事件\n    card.addEventListener('touchstart', (e) => {\n        e.stopPropagation();\n    }, { passive: true });\n    \n    card.addEventListener('touchend', (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        handleRoomClick(card, targetDoc);\n        // 触摸后立即移除焦点，防止出现焦点框\n        setTimeout(() => card.blur(), 0);\n    });\n    \n    return card;\n}\n\n// ==================== 创建房间卡片 ====================\nfunction createRoomCard(room, targetDoc) {\n    const roomCard = document.createElement('div');\n    roomCard.className = 'room-card actionable';\n    roomCard.dataset.roomName = room.key;\n    roomCard.style.flexGrow = room.size;\n    \n    const roomType = SafeGetValue(room.data, '类型');\n    const roomName = SafeGetValue(room.data, '名称', room.key);\n    const occupant = SafeGetValue(room.data, '住户');\n    \n    if (roomType === '您的房间') {\n        roomCard.classList.add('your-room');\n    } else if (roomType === '固定设施') {\n        roomCard.classList.add('fixed-room');\n    } else if (roomType === '卧室') {\n        roomCard.classList.add('bedroom-room');\n    } else if (roomType === '功能性房间') {\n        roomCard.classList.add('functional-room');\n    } else {\n        roomCard.classList.add('empty-room');\n    }\n    \n    const nameSpan = document.createElement('span');\n    nameSpan.className = 'room-name';\n    nameSpan.textContent = roomType === '您的房间' ? '👑 ' + roomName : roomName;\n    roomCard.appendChild(nameSpan);\n    \n    if (roomType === '卧室') {\n        const occupantSpan = document.createElement('span');\n        occupantSpan.className = 'room-occupant';\n        if (occupant !== '未知' && occupant !== '<user>') {\n            occupantSpan.textContent = `入住: ${occupant}`;\n            roomCard.dataset.occupant = occupant;\n        } else {\n            occupantSpan.textContent = '(空)';\n        }\n        roomCard.appendChild(occupantSpan);\n    }\n    \n    // 阻止房间卡片触发画布拖动\n    roomCard.addEventListener('mousedown', (e) => {\n        e.stopPropagation();\n    });\n    \n    // PC端点击事件\n    roomCard.onclick = (e) => {\n        e.stopPropagation();\n        handleRoomClick(roomCard, targetDoc);\n    };\n    \n    // 移动端触摸事件\n    roomCard.addEventListener('touchstart', (e) => {\n        e.stopPropagation();\n    }, { passive: true });\n    \n    roomCard.addEventListener('touchend', (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        handleRoomClick(roomCard, targetDoc);\n        // 触摸后立即移除焦点，防止出现焦点框\n        setTimeout(() => roomCard.blur(), 0);\n    });\n    \n    return roomCard;\n}\n\n// ==================== 房间点击处理 ====================\nfunction handleRoomClick(roomCard, targetDoc) {\n    if (isBuildMode) {\n        openManagementMenu(roomCard, targetDoc);\n    } else {\n        showTenantInfoModal(roomCard, targetDoc);\n    }\n}\n\n// ==================== 租客信息显示 ====================\nasync function showTenantInfoModal(roomCard, targetDoc) {\n    try {\n        // 优先使用缓存数据，如果没有则重新获取\n        let data = cachedMVUData;\n        if (!data && typeof Mvu !== 'undefined') {\n            let targetMessageId = 'latest';\n            if (typeof getLastMessageId === 'function') {\n                targetMessageId = getLastMessageId();\n            }\n            const mvuResult = Mvu.getMvuData({ type: 'message', message_id: targetMessageId });\n            data = mvuResult?.stat_data;\n        }\n        if (!data) return;\n        const roomNameKey = roomCard.dataset.roomName;\n        const occupantName = roomCard.dataset.occupant;\n        \n        if (!occupantName) {\n            openInfoModal(roomCard, targetDoc, data);\n            return;\n        }\n        \n        // 查找租客数据\n        let tenantData = null;\n        const tenantList = data.租客列表?.[0];\n        if (tenantList) {\n            for (const key in tenantList) {\n                if (key === '$meta') continue;\n                if (key === occupantName) {\n                    tenantData = tenantList[key];\n                    break;\n                }\n            }\n        }\n        \n        if (tenantData) {\n            targetDoc.getElementById('info-modal-title').textContent = occupantName;\n            targetDoc.getElementById('info-modal-subtitle').textContent = `${SafeGetValue(tenantData, '职业')} | ${SafeGetValue(tenantData, '年龄')}岁`;\n            \n            const favorability = parseInt(SafeGetValue(tenantData, '好感度', '0'), 10);\n            const lust = parseInt(SafeGetValue(tenantData, '性欲', '0'), 10);\n            const daysHere = parseInt(SafeGetValue(tenantData, '入住天数', '0'), 10);\n            const rent = SafeGetValue(tenantData, '月租金', '1500');\n            const rentPaid = SafeGetValue(tenantData, '本月已缴租', 'false') === 'true';\n            \n            let detailsHTML = '<ul>';\n            detailsHTML += `<li><strong>外貌:</strong> ${SafeGetValue(tenantData, '外貌')}</li>`;\n            detailsHTML += `<li><strong>性格:</strong> ${SafeGetValue(tenantData, '性格')}</li>`;\n            detailsHTML += `<li><strong>恋情:</strong> ${SafeGetValue(tenantData, '恋情')}</li>`;\n            detailsHTML += `<li><strong>当前位置:</strong> ${SafeGetValue(tenantData, '当前位置')}</li>`;\n            detailsHTML += `<li><strong>内心:</strong> ${SafeGetValue(tenantData, '内心')}</li>`;\n            detailsHTML += `<li><strong>状态:</strong> ${SafeGetValue(tenantData, '状态')}</li>`;\n            detailsHTML += `<li><strong>穿搭:</strong> ${SafeGetValue(tenantData, '穿搭')}</li>`;\n            \n            detailsHTML += `<hr style=\"margin: 8px 0; border: none; border-top: 1px solid var(--theme-border-color);\">`;\n            detailsHTML += `<li><strong>入住日期:</strong> ${SafeGetValue(tenantData, '入住日期')}</li>`;\n            detailsHTML += `<li><strong>入住天数:</strong> ${daysHere}天</li>`;\n            detailsHTML += `<li><strong>月租金:</strong> ¥${rent} ${rentPaid ? '✅已缴' : '⚠️未缴'}</li>`;\n            \n            // ⚠️ 人际关系字段已移除，请点击底部\"关系\"按钮查看关系网络\n            \n            detailsHTML += `<hr style=\"margin: 8px 0; border: none; border-top: 1px solid var(--theme-border-color);\">`;\n            detailsHTML += `<li>\n                                <strong>好感度:</strong>\n                                <div class=\"progress-bar-container\">\n                                    <div class=\"progress-bar\"><div class=\"progress-bar-fill progress-bar-favor\" style=\"width: ${favorability}%\"></div></div>\n                                    <span class=\"progress-value\">${favorability}</span>\n                                </div>\n                             </li>`;\n            detailsHTML += `<li>\n                                <strong>性欲:</strong>\n                                <div class=\"progress-bar-container\">\n                                    <div class=\"progress-bar\"><div class=\"progress-bar-fill progress-bar-lust\" style=\"width: ${lust}%\"></div></div>\n                                    <span class=\"progress-value\">${lust}</span>\n                                </div>\n                             </li>`;\n            detailsHTML += '</ul>';\n            targetDoc.getElementById('info-modal-details').innerHTML = detailsHTML;\n        } else {\n            targetDoc.getElementById('info-modal-title').textContent = occupantName;\n            targetDoc.getElementById('info-modal-subtitle').textContent = \"租客信息未找到\";\n            targetDoc.getElementById('info-modal-details').innerHTML = \"<p style='padding: 10px 0;'>无法找到该租客的详细信息</p>\";\n        }\n        targetDoc.getElementById('info-modal').classList.remove('hidden');\n    } catch (e) {\n        console.error(\"显示租客信息时出错: \", e);\n    }\n}\n\nasync function openInfoModal(roomCard, targetDoc, data) {\n    if (!data) {\n        data = cachedMVUData;\n        if (!data && typeof Mvu !== 'undefined') {\n            let targetMessageId = 'latest';\n            if (typeof getLastMessageId === 'function') {\n                targetMessageId = getLastMessageId();\n            }\n            const mvuResult = Mvu.getMvuData({ type: 'message', message_id: targetMessageId });\n            data = mvuResult?.stat_data;\n        }\n    }\n    const roomNameKey = roomCard.dataset.roomName;\n    const roomData = data.公寓?.房间列表?.[0]?.[roomNameKey];\n    \n    const roomType = SafeGetValue(roomData, '类型');\n    const roomName = SafeGetValue(roomData, '名称', roomNameKey);\n    const description = SafeGetValue(roomData, '描述', '无');\n    \n    targetDoc.getElementById('info-modal-title').textContent = roomName;\n    targetDoc.getElementById('info-modal-subtitle').textContent = `类型：${roomType}`;\n    targetDoc.getElementById('info-modal-details').innerHTML = `<p style=\"padding: 10px 0;\"><strong>房间描述:</strong> ${description}</p>`;\n    targetDoc.getElementById('info-modal').classList.remove('hidden');\n}\n\n// ==================== 格子选择器 ====================\nlet gridSelectionState = { start: null, end: null, isSelecting: false };\n\nfunction openAddRoomModal(floorName, availableSlots) {\n    const targetDoc = window.top ? window.top.document : document;\n    currentFloorForNewRoom = floorName;\n    targetDoc.getElementById('add-room-modal-title').textContent = `在【${floorName}】新建空房间`;\n    targetDoc.getElementById('add-room-modal-subtitle').textContent = `新建的房间将作为\"空房间\"（占位但未装修），之后可在建造模式下装修\\n可用空位：${availableSlots.map(s => `${s.start}-${s.end}`).join(', ')}`;\n    \n    gridSelectionState = { start: null, end: null, isSelecting: false };\n    \n    const gridContainer = targetDoc.getElementById('grid-selector');\n    gridContainer.innerHTML = '';\n    \n    // 确定已占用的位置\n    const occupiedSlots = new Set();\n    if (cachedMVUData) {\n        const roomsData = cachedMVUData.公寓?.房间列表?.[0];\n        if (roomsData) {\n            for (const roomKey in roomsData) {\n                if (roomKey === '$meta') continue;\n                const roomData = roomsData[roomKey];\n                const layout = roomData?.布局;\n                if (layout && SafeGetValue(layout, '楼层') === floorName) {\n                    const position = SafeGetValue(layout, '位置', '1-2');\n                    if (position !== 'outdoor-left' && position !== 'outdoor-right') {\n                        const pos = parsePosition(position);\n                        for (let i = pos.start; i <= pos.end; i++) {\n                            occupiedSlots.add(i);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    // 创建10个格子\n    for (let i = 1; i <= 10; i++) {\n        const cell = document.createElement('div');\n        cell.className = 'grid-cell';\n        cell.dataset.position = i;\n        cell.textContent = i;\n        \n        if (occupiedSlots.has(i)) {\n            cell.classList.add('occupied');\n            cell.title = '已占用';\n        } else {\n            cell.addEventListener('mousedown', () => handleGridSelect(i, occupiedSlots, targetDoc));\n            cell.addEventListener('mouseenter', () => {\n                if (gridSelectionState.isSelecting) {\n                    updateGridSelection(i, occupiedSlots, targetDoc);\n                }\n            });\n            cell.addEventListener('touchstart', (e) => {\n                e.preventDefault();\n                handleGridSelect(i, occupiedSlots, targetDoc);\n            });\n        }\n        \n        gridContainer.appendChild(cell);\n    }\n    \n    const handleEnd = () => {\n        gridSelectionState.isSelecting = false;\n    };\n    document.addEventListener('mouseup', handleEnd, { once: true });\n    document.addEventListener('touchend', handleEnd, { once: true });\n    \n    updateSelectionDisplay(targetDoc);\n    targetDoc.getElementById('add-room-modal').classList.remove('hidden');\n}\n\nfunction handleGridSelect(position, occupiedSlots, targetDoc) {\n    if (occupiedSlots.has(position)) return;\n    \n    gridSelectionState.start = position;\n    gridSelectionState.end = position;\n    gridSelectionState.isSelecting = true;\n    updateGridSelection(position, occupiedSlots, targetDoc);\n}\n\nfunction updateGridSelection(position, occupiedSlots, targetDoc) {\n    if (!gridSelectionState.start) return;\n    \n    const start = Math.min(gridSelectionState.start, position);\n    const end = Math.max(gridSelectionState.start, position);\n    \n    let valid = true;\n    for (let i = start; i <= end; i++) {\n        if (occupiedSlots.has(i)) {\n            valid = false;\n            break;\n        }\n    }\n    \n    if (valid) {\n        gridSelectionState.end = position;\n    }\n    \n    const cells = targetDoc.querySelectorAll('.grid-cell');\n    cells.forEach(cell => {\n        const pos = parseInt(cell.dataset.position);\n        if (!occupiedSlots.has(pos)) {\n            const finalStart = Math.min(gridSelectionState.start, gridSelectionState.end);\n            const finalEnd = Math.max(gridSelectionState.start, gridSelectionState.end);\n            \n            if (pos >= finalStart && pos <= finalEnd) {\n                cell.classList.add('selected');\n            } else {\n                cell.classList.remove('selected');\n            }\n        }\n    });\n    \n    updateSelectionDisplay(targetDoc);\n}\n\nfunction updateSelectionDisplay(targetDoc) {\n    const display = targetDoc.getElementById('selected-range-display');\n    if (gridSelectionState.start && gridSelectionState.end) {\n        const start = Math.min(gridSelectionState.start, gridSelectionState.end);\n        const end = Math.max(gridSelectionState.start, gridSelectionState.end);\n        const size = end - start + 1;\n        display.textContent = `已选择: ${start}-${end} (大小: ${size} 格)`;\n        display.style.color = '#28a745';\n        display.style.fontWeight = 'bold';\n    } else {\n        display.textContent = '请选择房间位置';\n        display.style.color = 'var(--theme-subtitle-color)';\n        display.style.fontWeight = 'normal';\n    }\n}\n\n// ==================== 其他模态框函数 ====================\nfunction openAddFloorModal(position) {\n    const targetDoc = window.top ? window.top.document : document;\n    targetDoc.getElementById('add-floor-position').value = position;\n    targetDoc.getElementById('add-floor-modal').classList.remove('hidden');\n}\n\nfunction openManagementMenu(roomCard, targetDoc) {\n    currentEditingRoomName = roomCard.dataset.roomName;\n    const roomType = SafeGetValue(cachedMVUData, `公寓.房间列表.0.${currentEditingRoomName}.类型`);\n    const occupant = roomCard.dataset.occupant;\n    \n    targetDoc.getElementById('management-modal-title').textContent = currentEditingRoomName;\n    targetDoc.getElementById('management-modal-subtitle').textContent = `类型：${roomType}`;\n    \n    const choicesDiv = targetDoc.getElementById('management-modal-choices');\n    choicesDiv.innerHTML = '';\n    \n    // ========== 空房间（未装修）：可以装修或删除 ==========\n    if (roomType === '空房间') {\n        const decorateBtn = document.createElement('button');\n        decorateBtn.textContent = '🏠 装修为卧室';\n        decorateBtn.onclick = () => {\n            const command = `将【${currentEditingRoomName}】装修为卧室，请执行：\n_.set('公寓.房间列表[0].${currentEditingRoomName}.类型[0]', '空房间', '卧室')\n\n请同时更新描述字段，添加适合卧室的描述（例如：\"温馨舒适的卧室\"）`;\n            fillCommand(command);\n            closeAllModals();\n        };\n        choicesDiv.appendChild(decorateBtn);\n        \n        const functionalBtn = document.createElement('button');\n        functionalBtn.textContent = '🎨 装修为功能性房间';\n        functionalBtn.onclick = () => {\n            const roomPurpose = prompt('请输入房间用途名称（例如：书房、健身房）');\n            if (roomPurpose) {\n                const command = `将【${currentEditingRoomName}】装修为功能性房间【${roomPurpose}】，请执行：\n_.set('公寓.房间列表[0].${currentEditingRoomName}.类型[0]', '空房间', '功能性房间')\n_.set('公寓.房间列表[0].${currentEditingRoomName}.名称[0]', '${currentEditingRoomName}', '${roomPurpose}')\n\n请同时更新描述字段，添加关于【${roomPurpose}】的详细描述（例如设施、功能等）`;\n                fillCommand(command);\n                closeAllModals();\n            }\n        };\n        choicesDiv.appendChild(functionalBtn);\n        \n        const deleteBtn = document.createElement('button');\n        deleteBtn.textContent = '🗑️ 删除房间';\n        deleteBtn.className = 'danger-btn';\n        deleteBtn.onclick = () => {\n            const command = `删除房间【${currentEditingRoomName}】，释放该位置，请执行：\n_.remove('公寓.房间列表[0]', '${currentEditingRoomName}')`;\n            fillCommand(command);\n            closeAllModals();\n        };\n        choicesDiv.appendChild(deleteBtn);\n    }\n    // ========== 卧室（有住户）：只能让租客退租 ==========\n    else if (roomType === '卧室' && occupant && occupant !== '未知') {\n        const evictBtn = document.createElement('button');\n        evictBtn.textContent = '🚪 让租客退租';\n        evictBtn.className = 'danger-btn';\n        evictBtn.onclick = () => {\n            const command = `让租客【${occupant}】从【${currentEditingRoomName}】退租，请执行：\n_.set('公寓.房间列表[0].${currentEditingRoomName}.住户[0]', '${occupant}', '未知')\n_.remove('租客列表[0]', '${occupant}')\n\n同时禁用Chat Lore中的租客信息（防止AI继续提及该租客）：\n/getchatbook | /findentry file={{pipe}} field=key ${occupant} | /setentryfield file={{pipe:1}} uid={{pipe:0}} field=disable 1`;\n            fillCommand(command);\n            closeAllModals();\n        };\n        choicesDiv.appendChild(evictBtn);\n    }\n    // ========== 卧室（无住户）：只能拆除装修 ==========\n    else if (roomType === '卧室' && (!occupant || occupant === '未知')) {\n        const removeDecorationBtn = document.createElement('button');\n        removeDecorationBtn.textContent = '🔨 拆除装修';\n        removeDecorationBtn.className = 'danger-btn';\n        removeDecorationBtn.onclick = () => {\n            const command = `拆除【${currentEditingRoomName}】的装修，变回空房间，请执行：\n_.set('公寓.房间列表[0].${currentEditingRoomName}.类型[0]', '卧室', '空房间')\n\n请同时更新描述字段，改为：\"新建的空房间，等待装修\"`;\n            fillCommand(command);\n            closeAllModals();\n        };\n        choicesDiv.appendChild(removeDecorationBtn);\n    }\n    // ========== 功能性房间：只能拆除装修 ==========\n    else if (roomType === '功能性房间') {\n        const removeDecorationBtn = document.createElement('button');\n        removeDecorationBtn.textContent = '🔨 拆除装修';\n        removeDecorationBtn.className = 'danger-btn';\n        removeDecorationBtn.onclick = () => {\n            const currentName = SafeGetValue(cachedMVUData, `公寓.房间列表.0.${currentEditingRoomName}.名称`);\n            const command = `拆除【${currentEditingRoomName}】（当前名称：${currentName}）的装修，变回空房间，请执行：\n_.set('公寓.房间列表[0].${currentEditingRoomName}.类型[0]', '功能性房间', '空房间')\n_.set('公寓.房间列表[0].${currentEditingRoomName}.名称[0]', '${currentName}', '${currentEditingRoomName}')\n\n请同时更新描述字段，改为：\"新建的空房间，等待装修\"`;\n            fillCommand(command);\n            closeAllModals();\n        };\n        choicesDiv.appendChild(removeDecorationBtn);\n    }\n    // ========== 固定设施/您的房间/室外区域：不可操作 ==========\n    else if (roomType === '固定设施' || roomType === '您的房间' || roomType === '室外区域') {\n        const infoText = document.createElement('p');\n        infoText.textContent = '该区域不可修改或拆除';\n        infoText.style.cssText = 'padding: 20px; text-align: center; color: var(--theme-subtitle-color);';\n        choicesDiv.appendChild(infoText);\n    }\n    \n    targetDoc.getElementById('management-modal').classList.remove('hidden');\n}\n\n// ==================== 命令生成 ====================\nfunction confirmAddRoom() {\n    const targetDoc = window.top ? window.top.document : document;\n    const floorName = currentFloorForNewRoom;\n    \n    if (!gridSelectionState.start || !gridSelectionState.end) {\n        alert('请先选择房间位置！');\n        return;\n    }\n    \n    const start = Math.min(gridSelectionState.start, gridSelectionState.end);\n    const end = Math.max(gridSelectionState.start, gridSelectionState.end);\n    const position = `${start}-${end}`;\n    \n    // 生成友好的房间名称（智能分配编号，避免重复）\n    const chineseNumbers = ['一', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二', '十三', '十四', '十五'];\n    \n    // 🔧 收集该楼层已使用的房间编号\n    const usedNumbers = new Set();\n    if (cachedMVUData && cachedMVUData.公寓 && cachedMVUData.公寓.房间列表) {\n        const roomsData = cachedMVUData.公寓.房间列表[0];\n        if (roomsData) {\n            for (const roomKey in roomsData) {\n                if (roomKey === '$meta') continue;\n                const roomData = roomsData[roomKey];\n                const layout = roomData?.布局;\n                if (layout && SafeGetValue(layout, '楼层') === floorName) {\n                    // 提取房间编号（例如从\"四楼房间三\"中提取\"三\"）\n                    const match = roomKey.match(/房间(.+)$/);\n                    if (match) {\n                        usedNumbers.add(match[1]);\n                    }\n                }\n            }\n        }\n    }\n    \n    // 🔧 加上临时计数器中已分配的编号\n    if (!tempRoomCounters[floorName]) {\n        tempRoomCounters[floorName] = [];\n    }\n    tempRoomCounters[floorName].forEach(num => usedNumbers.add(num));\n    \n    // 🔧 找到第一个未被使用的编号\n    let roomNumber = null;\n    for (let i = 0; i < chineseNumbers.length; i++) {\n        if (!usedNumbers.has(chineseNumbers[i])) {\n            roomNumber = chineseNumbers[i];\n            break;\n        }\n    }\n    \n    // 如果中文数字用完了，用阿拉伯数字\n    if (!roomNumber) {\n        let numIndex = chineseNumbers.length + 1;\n        while (usedNumbers.has(numIndex.toString())) {\n            numIndex++;\n        }\n        roomNumber = numIndex.toString();\n    }\n    \n    // 记录到临时计数器\n    tempRoomCounters[floorName].push(roomNumber);\n    \n    // 生成房间名：四楼房间一、四楼房间二...\n    const roomName = `${floorName}房间${roomNumber}`;\n    \n    const command = `在【${floorName}】新建空房间【${roomName}】（占据位置但未装修，之后可装修为卧室或功能性房间），请执行：\n_.insert('公寓.房间列表[0]', '${roomName}', {\n  \"类型\": [\"空房间\", \"房间类型\"],\n  \"名称\": [\"${roomName}\", \"房间名称\"],\n  \"住户\": [\"未知\", \"当前住户\"],\n  \"描述\": [\"新建的空房间，等待装修\", \"详细描述\"],\n  \"布局\": { \"楼层\": \"${floorName}\", \"位置\": \"${position}\" }\n})`;\n    \n    fillCommand(command);\n    closeAllModals();\n}\n\nfunction confirmAddFloor() {\n    const targetDoc = window.top ? window.top.document : document;\n    const floorName = targetDoc.getElementById('add-floor-name').value.trim();\n    const position = targetDoc.getElementById('add-floor-position').value;\n    \n    if (!floorName) {\n        alert('请输入楼层名称！');\n        return;\n    }\n    \n    const command = `新建楼层【${floorName}】（${position === 'top' ? '向上扩展' : '向下扩展'}），请执行：\n_.insert('公寓.楼层配置', '${floorName}', {\n  \"显示名称\": [\"${floorName}\", \"显示名称\"],\n  \"总容量\": [10, \"总容量\"],\n  \"顺序\": [${position === 'top' ? '5' : '-2'}, \"顺序值\"]\n})\n\n然后刷新状态栏即可看到新楼层。`;\n    \n    fillCommand(command);\n    closeAllModals();\n}\n\nfunction confirmRecruitment() {\n    const targetDoc = window.top ? window.top.document : document;\n    const keywords = targetDoc.getElementById('recruitment-keywords').value.trim();\n    const command = `招募一名符合以下特征的租客：${keywords}`;\n    fillCommand(command);\n    closeAllModals();\n}\n\nfunction fillCommand(command) {\n    try {\n        const chatInput = parent.document.querySelector('#send_textarea');\n        if (chatInput) {\n            if (chatInput.value.trim() !== '') {\n                chatInput.value += '\\n' + command;\n            } else { \n                chatInput.value = command;\n            }\n            chatInput.focus();\n        } else {\n            throw new Error();\n        }\n    } catch (e) {\n        alert('未能自动找到输入框，请手动复制：\\n\\n' + command);\n    }\n}\n\n// ==================== 其他功能 ====================\nfunction closeAllModals() {\n    const targetDoc = window.top ? window.top.document : document;\n    const allModals = targetDoc.querySelectorAll('.modal-overlay');\n    allModals.forEach(modal => modal.classList.add('hidden'));\n}\n\nfunction openRecruitmentModal() {\n    const targetDoc = window.top ? window.top.document : document;\n    targetDoc.getElementById('recruitment-modal').classList.remove('hidden');\n}\n\nfunction openSettingsModal() {\n    const targetDoc = window.top ? window.top.document : document;\n    targetDoc.getElementById('settings-modal').classList.remove('hidden');\n}\n\nfunction switchTheme(theme) {\n    const targetDoc = window.top ? window.top.document : document;\n    const panel = targetDoc.getElementById('apartment-main-panel');\n    if (theme === 'dark') {\n        panel.classList.add('dark-theme');\n    } else { \n        panel.classList.remove('dark-theme');\n    }\n}\n\nfunction openHistoryModal() {\n    const targetDoc = window.top ? window.top.document : document;\n    const data = cachedMVUData;\n    if (!data) return;\n    \n    // MVU格式：[数据数组, 描述文本]，需要用[0]获取实际数据数组\n    const historyArray = data.事件历史?.[0];\n    const contentDiv = targetDoc.getElementById('history-content');\n    \n    const events = [];\n    if (historyArray && Array.isArray(historyArray)) {\n        for (let i = 0; i < historyArray.length; i++) {\n            const item = historyArray[i];\n            // 跳过元数据标记\n            if (item === \"$__META_EXTENSIBLE__$\") continue;\n            if (typeof item === 'string') {\n                events.push(item);\n            }\n        }\n    }\n    \n    if (events.length === 0) {\n        contentDiv.innerHTML = '<p style=\"color: var(--theme-subtitle-color); text-align: center;\">暂无事件记录</p>';\n    } else {\n        let html = '<div style=\"line-height: 1.8;\">';\n        events.forEach(event => {\n            html += `<div style=\"padding: 8px 0; border-bottom: 1px solid var(--theme-border-color);\">📌 ${event}</div>`;\n        });\n        html += '</div>';\n        contentDiv.innerHTML = html;\n    }\n    \n    targetDoc.getElementById('history-modal').classList.remove('hidden');\n}\n\nfunction openAchievementModal() {\n    const targetDoc = window.top ? window.top.document : document;\n    const data = cachedMVUData;\n    if (!data) return;\n    \n    // MVU格式：[数据数组, 描述文本]，需要用[0]获取实际数据数组\n    const achievementsArray = data.成就列表?.[0];\n    const contentDiv = targetDoc.getElementById('achievement-content');\n    \n    // 收集所有成就\n    const achievementList = [];\n    \n    if (achievementsArray && Array.isArray(achievementsArray)) {\n        achievementsArray.forEach((item, index) => {\n            // 跳过元数据标记\n            if (item === \"$__META_EXTENSIBLE__$\") return;\n            \n            if (typeof item === 'string') {\n                // 解析格式：\"成就名 - 成就描述\"\n                const parts = item.split(' - ');\n                if (parts.length >= 2) {\n                    achievementList.push({\n                        name: parts[0].trim(),\n                        desc: parts.slice(1).join(' - ').trim(),\n                        achieved: true,\n                        date: '未知'\n                    });\n                } else {\n                    // 如果没有按照格式，直接使用整个字符串作为描述\n                    achievementList.push({\n                        name: `成就 ${achievementList.length + 1}`,\n                        desc: item,\n                        achieved: true,\n                        date: '未知'\n                    });\n                }\n            }\n        });\n    }\n    \n    if (achievementList.length === 0) {\n        contentDiv.innerHTML = '<p style=\"color: var(--theme-subtitle-color); text-align: center;\">暂无成就<br><small style=\"font-size: 0.85em;\">AI会在达成特定条件时自动添加成就</small></p>';\n    } else { \n        let html = '<div style=\"display: grid; gap: 15px;\">';\n        achievementList.forEach(achievement => {\n            html += `<div style=\"padding: 15px; background-color: ${achievement.achieved ? 'var(--color-outdoor)' : 'var(--theme-phone-bg)'}; border-radius: 8px; border: 1px solid var(--theme-border-color);\">\n                <div style=\"font-weight: bold; margin-bottom: 5px;\">${achievement.achieved ? '🏆' : '🔒'} ${achievement.name}</div>\n                <div style=\"font-size: 0.9em; color: var(--theme-subtitle-color);\">${achievement.desc}</div>\n                ${achievement.achieved && achievement.date !== '未知' ? `<div style=\"font-size: 0.8em; color: var(--theme-subtitle-color); margin-top: 5px;\">达成于：${achievement.date}</div>` : ''}\n            </div>`;\n        });\n        html += '</div>';\n        contentDiv.innerHTML = html;\n    }\n    \n    targetDoc.getElementById('achievement-modal').classList.remove('hidden');\n}\n\n// ==================== 事件生成器 ====================\nconst singleEventTypes = [\"个人情感类\", \"生活经济类\", \"日常委托类\", \"家居修理类\"];\nconst groupEventTypes = [\"节日派对类\", \"室内娱乐类\", \"突发状况类\", \"共同创作类\"];\n\nfunction openEventGenerator() {\n    const targetDoc = window.top ? window.top.document : document;\n    targetDoc.getElementById('event-modal').classList.add('visible');\n}\n\nfunction closeEventGenerator() {\n    const targetDoc = window.top ? window.top.document : document;\n    targetDoc.getElementById('event-modal').classList.remove('visible');\n}\n\nfunction triggerEvent(type, category) {\n    let eventName = type;\n    if (type.startsWith('random-')) {\n        const isSingle = type.includes('single');\n        const eventList = isSingle ? singleEventTypes : groupEventTypes;\n        eventName = eventList[Math.floor(Math.random() * eventList.length)];\n        category = isSingle ? '个人' : '集体';\n    }\n    const command = `我选择触发${category}随机事件：${eventName}，请帮我丝滑过渡。`;\n    fillCommand(command);\n    closeEventGenerator();\n}\n\n// ==================== 关系网络功能 ====================\nfunction openRelationModal() {\n    const targetDoc = window.top ? window.top.document : document;\n    const data = cachedMVUData;\n    if (!data) return;\n    \n    const tenantList = data.租客列表?.[0];\n    const contentDiv = targetDoc.getElementById('relation-content');\n    \n    if (!tenantList || Object.keys(tenantList).filter(k => k !== '$meta').length === 0) {\n        contentDiv.innerHTML = '<p style=\"color: var(--theme-subtitle-color); text-align: center;\">暂无租客数据</p>';\n        targetDoc.getElementById('relation-modal').classList.remove('hidden');\n        return;\n    }\n    \n    // 构建租客列表（不包括<user>，放弃反推）\n    const tenants = [];\n    \n    for (const key in tenantList) {\n        if (key === '$meta') continue;\n        const tenant = tenantList[key];\n        const relations = tenant.关系 || {};\n        \n        tenants.push({\n            name: key,\n            displayName: key,\n            relations: relations\n        });\n    }\n    \n    // 生成界面\n    let html = '<div style=\"display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 10px;\">';\n    \n    console.log('📊 所有租客数据:', tenants);\n    \n    tenants.forEach(tenant => {\n        const relationCount = Object.keys(tenant.relations).filter(k => k !== '$meta').length;\n        console.log(`🔍 租客 ${tenant.name} 的关系:`, tenant.relations, `数量: ${relationCount}`);\n        html += `\n            <div class=\"tenant-relation-card\" data-tenant-name=\"${tenant.name}\"\n                 style=\"padding: 15px; background: var(--theme-modal-btn-bg); border-radius: 10px; cursor: pointer; transition: all 0.2s; border: 2px solid var(--theme-border-color); text-align: center;\"\n                 onmouseover=\"this.style.transform='translateY(-3px)'; this.style.boxShadow='0 4px 12px rgba(0,0,0,0.15)';\"\n                 onmouseout=\"this.style.transform='translateY(0)'; this.style.boxShadow='none';\">\n                <div style=\"font-size: 28px; margin-bottom: 8px;\">👥</div>\n                <div style=\"font-weight: bold; margin-bottom: 5px; font-size: 14px;\">${tenant.displayName}</div>\n                <div style=\"font-size: 12px; color: var(--theme-subtitle-color);\">\n                    ${relationCount > 0 ? `${relationCount} 个关系` : '暂无关系'}\n                </div>\n            </div>\n        `;\n    });\n    \n    html += '</div>';\n    contentDiv.innerHTML = html;\n    \n    // 使用事件委托处理点击\n    contentDiv.removeEventListener('click', handleRelationCardClick); // 先移除旧的监听器\n    contentDiv.addEventListener('click', handleRelationCardClick);\n    \n    targetDoc.getElementById('relation-modal').classList.remove('hidden');\n}\n\n// 事件委托处理函数\nfunction handleRelationCardClick(e) {\n    const card = e.target.closest('.tenant-relation-card');\n    if (card) {\n        const tenantName = card.dataset.tenantName;\n        console.log('🎯 点击了租客卡片:', tenantName);\n        showCharacterRelations(tenantName);\n    }\n}\n\n// 显示某个租客的关系详情（简单列表）\nfunction showCharacterRelations(characterName) {\n    console.log('🎯 showCharacterRelations 被调用，角色名:', characterName);\n    \n    const targetDoc = window.top ? window.top.document : document;\n    const data = cachedMVUData;\n    if (!data) {\n        console.error('❌ cachedMVUData 为空');\n        return;\n    }\n    \n    const tenantList = data.租客列表?.[0];\n    const contentDiv = targetDoc.getElementById('relation-content');\n    \n    if (!tenantList) {\n        console.error('❌ tenantList 为空');\n        contentDiv.innerHTML = '<p style=\"color: var(--theme-subtitle-color); text-align: center;\">租客数据为空</p>';\n        return;\n    }\n    \n    // 直接获取租客数据\n    const tenant = tenantList[characterName];\n    if (!tenant) {\n        console.error('❌ 未找到租客:', characterName);\n        contentDiv.innerHTML = '<p style=\"color: var(--theme-subtitle-color); text-align: center;\">未找到租客数据</p>';\n        return;\n    }\n    \n    const character = {\n        name: characterName,\n        displayName: characterName,\n        relations: tenant.关系 || {}\n    };\n    \n    console.log('✅ 找到租客数据:', character);\n    \n    // 显示租客关系\n    let html = `\n        <div style=\"margin-bottom: 15px; text-align: center;\">\n            <button id=\"relation-back-btn\"\n                    style=\"padding: 8px 16px; background: var(--theme-modal-btn-bg); border: 1px solid var(--theme-border-color); border-radius: 8px; cursor: pointer; color: var(--theme-text-color);\">\n                ← 返回列表\n            </button>\n        </div>\n        \n        <div style=\"text-align: center; margin-bottom: 20px;\">\n            <div style=\"font-size: 18px; font-weight: bold; color: var(--theme-text-color);\">\n                👥 ${character.displayName} 的关系网络\n            </div>\n        </div>\n    `;\n    \n    // 过滤掉$meta字段，获取真实的关系条目\n    const relationEntries = Object.entries(character.relations).filter(([k, v]) => {\n        return k !== '$meta';\n    });\n    \n    console.log('🔍 调试信息 - 角色:', character.name);\n    console.log('🔍 原始关系对象:', character.relations);\n    console.log('🔍 过滤后的关系条目:', relationEntries);\n    \n    if (relationEntries.length === 0) {\n        html += `\n            <div style=\"text-align: center; padding: 40px; color: var(--theme-subtitle-color);\">\n                <div style=\"font-size: 48px; margin-bottom: 15px; opacity: 0.5;\">🤷</div>\n                <div style=\"font-size: 16px;\">暂无关系记录</div>\n            </div>\n        `;\n    } else {\n        // 简单列表形式显示关系\n        html += '<div style=\"display: flex; flex-direction: column; gap: 12px;\">';\n        \n        relationEntries.forEach(([targetName, relationDesc]) => {\n            // 关系数据格式：[关系描述, 说明文本]，需要取[0]获取实际描述\n            const relationText = Array.isArray(relationDesc) ? relationDesc[0] : relationDesc;\n            const displayName = targetName === '<user>' ? '您' : targetName;\n            const icon = targetName === '<user>' ? '👤' : '👥';\n            \n            html += `\n                <div style=\"padding: 15px; background: var(--theme-modal-btn-bg); border-radius: 10px; border: 1px solid var(--theme-border-color); display: flex; align-items: center; gap: 15px;\">\n                    <div style=\"font-size: 32px; flex-shrink: 0;\">${icon}</div>\n                    <div style=\"flex: 1;\">\n                        <div style=\"font-weight: bold; font-size: 16px; margin-bottom: 5px; color: var(--theme-text-color);\">\n                            ${character.displayName} → ${displayName}\n                        </div>\n                        <div style=\"font-size: 14px; color: var(--theme-subtitle-color);\">\n                            关系：<span style=\"color: #667eea; font-weight: bold;\">${relationText}</span>\n                        </div>\n                    </div>\n                </div>\n            `;\n        });\n        \n        html += '</div>';\n    }\n    \n    contentDiv.innerHTML = html;\n    \n    // 绑定返回按钮事件\n    const backBtn = targetDoc.getElementById('relation-back-btn');\n    if (backBtn) {\n        backBtn.addEventListener('click', () => {\n            console.log('🔙 返回租客列表');\n            openRelationModal();\n        });\n    }\n}\n\n// 绘制关系网络图\nfunction drawRelationGraph(character, relationEntries, targetDoc) {\n    const canvas = targetDoc.getElementById('relation-canvas');\n    if (!canvas) return;\n    \n    const ctx = canvas.getContext('2d');\n    const dpr = window.devicePixelRatio || 1;\n    \n    // 设置Canvas实际大小\n    const rect = canvas.getBoundingClientRect();\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n    ctx.scale(dpr, dpr);\n    \n    const width = rect.width;\n    const height = rect.height;\n    \n    // 中心点位置\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const centerRadius = 35;\n    \n    // 计算周围节点的位置（圆形分布）\n    const nodeRadius = 30;\n    const orbitRadius = Math.min(width, height) * 0.32; // 轨道半径\n    const angleStep = (Math.PI * 2) / relationEntries.length;\n    \n    // 获取主题颜色\n    const isDarkTheme = targetDoc.getElementById('apartment-main-panel').classList.contains('dark-theme');\n    const textColor = isDarkTheme ? '#e0e0e0' : '#333333';\n    const lineColor = isDarkTheme ? '#667eea' : '#667eea';\n    const centerColor = isDarkTheme ? '#7c3aed' : '#8b5cf6';\n    const nodeColor = isDarkTheme ? '#4ade80' : '#10b981';\n    const bgColor = isDarkTheme ? 'rgba(255, 255, 255, 0.05)' : 'rgba(0, 0, 0, 0.02)';\n    \n    // 清空画布\n    ctx.clearRect(0, 0, width, height);\n    \n    // 绘制背景\n    ctx.fillStyle = bgColor;\n    ctx.fillRect(0, 0, width, height);\n    \n    // 计算所有节点位置\n    const nodes = relationEntries.map(([targetName, relationDesc], index) => {\n        const angle = angleStep * index - Math.PI / 2; // 从顶部开始\n        // 关系数据格式：[关系描述, 说明文本]，需要取[0]获取实际描述\n        const relationText = Array.isArray(relationDesc) ? relationDesc[0] : relationDesc;\n        return {\n            x: centerX + Math.cos(angle) * orbitRadius,\n            y: centerY + Math.sin(angle) * orbitRadius,\n            name: targetName,\n            displayName: targetName === '<user>' ? '您' : targetName,\n            relation: relationText\n        };\n    });\n    \n    // 1. 绘制连接线\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = 2;\n    ctx.setLineDash([5, 5]);\n    \n    nodes.forEach(node => {\n        ctx.beginPath();\n        ctx.moveTo(centerX, centerY);\n        ctx.lineTo(node.x, node.y);\n        ctx.stroke();\n    });\n    \n    ctx.setLineDash([]);\n    \n    // 2. 绘制关系文字（在线的中点）\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    \n    nodes.forEach(node => {\n        const midX = (centerX + node.x) / 2;\n        const midY = (centerY + node.y) / 2;\n        \n        // 计算文字的旋转角度\n        const angle = Math.atan2(node.y - centerY, node.x - centerX);\n        const distance = Math.sqrt(Math.pow(node.x - centerX, 2) + Math.pow(node.y - centerY, 2));\n        \n        // 文字背景\n        const text = node.relation;\n        const metrics = ctx.measureText(text);\n        const textWidth = metrics.width;\n        const textHeight = 16;\n        \n        ctx.fillStyle = isDarkTheme ? 'rgba(0, 0, 0, 0.7)' : 'rgba(255, 255, 255, 0.9)';\n        ctx.fillRect(midX - textWidth / 2 - 4, midY - textHeight / 2, textWidth + 8, textHeight);\n        \n        ctx.fillStyle = lineColor;\n        ctx.fillText(text, midX, midY);\n    });\n    \n    // 3. 绘制周围节点\n    nodes.forEach(node => {\n        // 节点圆形\n        ctx.beginPath();\n        ctx.arc(node.x, node.y, nodeRadius, 0, Math.PI * 2);\n        ctx.fillStyle = nodeColor;\n        ctx.fill();\n        ctx.strokeStyle = isDarkTheme ? '#333' : '#fff';\n        ctx.lineWidth = 3;\n        ctx.stroke();\n        \n        // 节点图标\n        ctx.font = '20px Arial';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillStyle = '#fff';\n        ctx.fillText(node.name === '<user>' ? '👤' : '👥', node.x, node.y - 2);\n        \n        // 节点名称（在圆形下方）\n        ctx.font = 'bold 13px Arial';\n        ctx.fillStyle = textColor;\n        ctx.fillText(node.displayName, node.x, node.y + nodeRadius + 15);\n    });\n    \n    // 4. 绘制中心节点（最后绘制，在最上层）\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, centerRadius, 0, Math.PI * 2);\n    ctx.fillStyle = centerColor;\n    ctx.fill();\n    ctx.strokeStyle = isDarkTheme ? '#333' : '#fff';\n    ctx.lineWidth = 4;\n    ctx.stroke();\n    \n    // 中心节点图标\n    ctx.font = '28px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillStyle = '#fff';\n    ctx.fillText(character.name === '<user>' ? '👤' : '👥', centerX, centerY - 3);\n    \n    // 中心节点名称（在圆形下方）\n    ctx.font = 'bold 16px Arial';\n    ctx.fillStyle = textColor;\n    ctx.fillText(character.displayName, centerX, centerY + centerRadius + 20);\n}\n\n// ==================== 启动脚本 ====================\n// 等待 jQuery 加载完成\nfunction waitForJQuery(callback) {\n    if (typeof jQuery !== 'undefined' || typeof $ !== 'undefined') {\n        console.log('✅ jQuery 已就绪');\n        callback();\n    } else {\n        console.log('⏳ 等待 jQuery...');\n        setTimeout(() => waitForJQuery(callback), 100);\n    }\n}\n\n// DOM 加载完成后初始化\nwaitForJQuery(() => {\n    if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', initializeApartmentPlugin);\n    } else {\n        initializeApartmentPlugin();\n    }\n});\n\nconsole.log('✅ 掌上公寓插件脚本加载完成');\n",
  "info": "",
  "button": {
    "enabled": true,
    "buttons": []
  },
  "data": {}
}